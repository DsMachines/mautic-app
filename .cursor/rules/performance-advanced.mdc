---
name: performance-advanced  
description: Advanced performance patterns (monitoring, PHP 8.3+, specialized) - applies intelligently when AI detects advanced optimization needs
globs:
  - Dashboard/**/*.php
  - "**/*.php"
alwaysApply: false
---

# 🔍 **PERFORMANCE ADVANCED PATTERNS - INTELLIGENT FAILSAFE HOOK**

## 🧠 **INTELLIGENT AUTO-TRIGGER CONDITIONS**

**AI ASSISTANT MUST REFERENCE this guide when detecting ANY of these advanced performance patterns:**

### **🔍 TRIGGER KEYWORDS & PATTERNS:**
```php
// ADVANCED PERFORMANCE TRIGGERS - AI SHOULD LOAD THIS FILE
"monitoring"                 // Performance monitoring discussions
"monitor_"                   // Monitor pattern prefixes
"diagnostics"                // System diagnostics needs
"performance monitoring"     // Performance tracking requirements
"system health"              // Health monitoring discussions
"memory monitoring"          // Memory usage tracking
"database performance"       // Database optimization analysis
"slow operations"            // Performance bottleneck identification
"performance metrics"        // Metrics collection and analysis
"automated diagnostics"      // Automated performance checking
"health checks"              // System health validation
"performance alerts"         // Alert system implementation
"optimization analysis"      // Performance analysis needs
"PHP 8.3"                    // Modern PHP features
"php_8_3"                    // PHP 8.3 specific patterns
"readonly"                   // PHP readonly properties
"enums"                      // PHP enums usage
"match"                      // PHP match expressions
"franken"                    // FrankenPHP optimization
"autoload"                   // Autoloader optimization
"lazy loading"               // Lazy loading patterns
"service container"          // Dependency injection
"dashboard_permissions"      // Dashboard-specific patterns
"dashboard_capability"       // Dashboard capability checking
"current_user_can"           // WordPress capability functions
"user_can"                   // User capability checking
"groups_levels"              // Dashboard permission patterns
```

### **🎯 CONTEXT TRIGGERS:**
- User requests performance monitoring implementation
- AI detects need for system diagnostics
- Memory usage monitoring requirements
- Database performance analysis needed
- Modern PHP feature implementation
- Dashboard plugin optimization discussions
- WordPress capability optimization
- Permission system performance tuning
- Automated health checking requirements
- Performance metrics collection needs

### **🔗 INTELLIGENT LOADING PROTOCOL:**
```
1. DETECT advanced performance patterns or keywords
2. AUTO-LOAD this file for specialized implementation patterns
3. REFERENCE ai-performance-optimization-failsafe.mdc for security integration
4. REFERENCE performance-core.mdc for foundational patterns if needed
5. APPLY appropriate advanced performance pattern with security compliance
6. CONTINUE with optimized implementation
```

---

## 🔍 Performance Monitoring (`monitor_*`)

### Performance Monitoring Classes (`monitor_performance`)
**Pattern Source**: WP Defender monitoring, Modern practices

```php
// ✅ GOOD: Comprehensive performance monitoring
class PerformanceMonitor {
    private array $metrics = [];
    
    public function startTimer(string $operation): void {
        $this->metrics[$operation] = [
            'start_time' => microtime(true),
            'start_memory' => memory_get_usage(true)
        ];
    }
    
    public function endTimer(string $operation): array {
        if (!isset($this->metrics[$operation])) {
            return [];
        }
        
        $end_time = microtime(true);
        $end_memory = memory_get_usage(true);
        
        $metrics = [
            'duration' => $end_time - $this->metrics[$operation]['start_time'],
            'memory_used' => $end_memory - $this->metrics[$operation]['start_memory'],
            'memory_peak' => memory_get_peak_usage(true)
        ];
        
        unset($this->metrics[$operation]);
        
        // Log slow operations
        if ($metrics['duration'] > 1.0) {
            error_log("Slow operation {$operation}: {$metrics['duration']}s");
        }
        
        return $metrics;
    }
    
    public function logDatabaseQuery(string $query, float $duration): void {
        if ($duration > 0.1) { // 100ms threshold
            error_log("Slow query ({$duration}s): {$query}");
        }
    }
}
```

### System Health Monitoring (`monitor_health`)
**Pattern Source**: WP Defender monitoring patterns

```php
// ✅ GOOD: System health monitoring
function monitor_system_health() {
    $health = [
        'memory_usage' => memory_get_usage(true),
        'memory_limit' => ini_get('memory_limit'),
        'memory_peak' => memory_get_peak_usage(true),
        'database_queries' => get_num_queries(),
        'cache_hit_ratio' => $this->get_cache_hit_ratio(),
        'disk_space' => disk_free_space('/'),
        'load_average' => sys_getloadavg()
    ];
    
    // Store metrics for analysis
    $this->store_health_metrics($health);
    
    // Alert on critical issues
    if ($health['memory_usage'] > ($this->convert_to_bytes($health['memory_limit']) * 0.9)) {
        $this->send_memory_alert($health);
    }
    
    return $health;
}
```

### Automated Diagnostics (`monitor_diagnostics`)
**Pattern Source**: WP Defender diagnostic patterns

```php
// ✅ GOOD: Automated performance diagnostics
function run_performance_diagnostics() {
    $diagnostics = [
        'database' => $this->check_database_performance(),
        'cache' => $this->check_cache_performance(),
        'memory' => $this->check_memory_usage(),
        'disk' => $this->check_disk_performance(),
        'network' => $this->check_network_performance()
    ];
    
    $issues = [];
    foreach ($diagnostics as $category => $results) {
        if ($results['status'] === 'warning' || $results['status'] === 'error') {
            $issues[] = $category . ': ' . $results['message'];
        }
    }
    
    if (!empty($issues)) {
        $this->log_performance_issues($issues);
        $this->send_performance_alert($issues);
    }
    
    return $diagnostics;
}

// ✅ GOOD: Database performance check
function check_database_performance() {
    global $wpdb;
    
    $start_time = microtime(true);
    $wpdb->get_var("SELECT 1");
    $query_time = microtime(true) - $start_time;
    
    $slow_queries = $wpdb->get_var(
        "SELECT COUNT(*) FROM information_schema.processlist 
         WHERE time > 1 AND command != 'Sleep'"
    );
    
    $status = 'good';
    $message = 'Database performance is optimal';
    
    if ($query_time > 0.1) {
        $status = 'warning';
        $message = 'Database queries are slow';
    }
    
    if ($slow_queries > 5) {
        $status = 'error';
        $message = 'Multiple slow queries detected';
    }
    
    return [
        'status' => $status,
        'message' => $message,
        'query_time' => $query_time,
        'slow_queries' => $slow_queries
    ];
}
```

---

## 📈 Specialized Optimization (`opt_*`)

### Autoload Optimization (`opt_autoload`)
**Pattern Source**: Modern PHP performance practices

```php
// ✅ GOOD: Optimized autoloader
function optimize_autoloader() {
    // Generate optimized autoloader
    exec('composer dump-autoload -o --no-dev');
    
    // Enable APCu caching if available
    if (function_exists('apcu_enabled') && apcu_enabled()) {
        exec('composer dump-autoload -o --apcu');
    }
}

// ✅ GOOD: Lazy loading implementation
class LazyServiceContainer {
    private array $services = [];
    private array $factories = [];
    
    public function register(string $name, callable $factory): void {
        $this->factories[$name] = $factory;
    }
    
    public function get(string $name): mixed {
        if (!isset($this->services[$name])) {
            if (!isset($this->factories[$name])) {
                throw new InvalidArgumentException("Service {$name} not found");
            }
            
            $this->services[$name] = call_user_func($this->factories[$name]);
        }
        
        return $this->services[$name];
    }
}
```

### Memory Monitoring (`monitor_memory`)
**Pattern Source**: Modern PHP performance patterns

```php
// ✅ GOOD: Memory monitoring with alerts
function monitor_memory_usage($operation_name) {
    $start_memory = memory_get_usage(true);
    
    return function() use ($operation_name, $start_memory) {
        $end_memory = memory_get_usage(true);
        $memory_diff = $end_memory - $start_memory;
        
        if ($memory_diff > 10 * 1024 * 1024) { // 10MB threshold
            error_log("High memory usage in {$operation_name}: {$memory_diff} bytes");
        }
        
        return $memory_diff;
    };
}

// ✅ GOOD: Proactive memory optimization
function optimize_memory_usage() {
    gc_collect_cycles();
    wp_cache_flush();
    
    $memory_usage = memory_get_usage(true);
    $peak_memory = memory_get_peak_usage(true);
    
    error_log("Memory optimized - Current: {$memory_usage}, Peak: {$peak_memory}");
    
    return [
        'current' => $memory_usage,
        'peak' => $peak_memory,
        'limit' => ini_get('memory_limit')
    ];
}
```

---

## 🚨 Dashboard Plugin Specific (`dashboard_*`)

### Permission System Best Practices (`dashboard_permissions`)
**Pattern Source**: Dashboard Plugin v1.2.1

```php
// ✅ GOOD: DO NOT USE `groups_levels` COLUMN
// The `groups_levels` column in `wp_cpaas_user_permissions` is legacy/redundant.
// All permission checks MUST use `user_groups` and `user_levels` only.

// ✅ GOOD: Correct permission checking
function check_user_dashboard_access($user_id, $required_groups = []) {
    global $wpdb;
    
    $permissions = $wpdb->get_row($wpdb->prepare(
        "SELECT user_groups, user_levels FROM {$wpdb->prefix}cpaas_user_permissions 
         WHERE user_id = %d",
        $user_id
    ));
    
    if (!$permissions) {
        return false;
    }
    
    $user_groups = json_decode($permissions->user_groups, true) ?: [];
    $user_levels = json_decode($permissions->user_levels, true) ?: [];
    
    // Check group access
    if (!empty($required_groups)) {
        return !empty(array_intersect($required_groups, $user_groups));
    }
    
    return !empty($user_groups) || !empty($user_levels);
}
```

### WordPress Capability Patterns (`dashboard_capability`)
**Pattern Source**: PMPro Plugin (50+ uses), WP Defender Plugin (15+ uses)

```php
// ✅ GOOD: Use current_user_can() for current user checks
function dashboard_ajax_handler() {
    if (!current_user_can('manage_options')) {
        wp_die('Access denied');
    }
    // Process request
}

// ✅ GOOD: Use user_can() for specific user checks
function check_user_template_access($template_slug, $user_id) {
    // Super admin always has access
    if (user_can($user_id, 'manage_options')) {
        return true;
    }
    
    // Check specific template permissions
    return check_template_permissions($user_id, $template_slug);
}

// ❌ BAD: Avoid these patterns
function inefficient_current_user_check() {
    // Don't use user_can() for current user
    if (user_can(get_current_user_id(), 'manage_options')) {
        // Inefficient - unnecessary user lookup
    }
}
```

---

## 🎯 **AI Assistant Advanced Usage**

### **Modern PHP Patterns**
```bash
# PHP 8.3+ features
"Show me php_8_3 optimization patterns"
"Find php_enums performance examples"
"Get php_readonly class patterns"

# FrankenPHP optimization
"Show php_franken worker mode implementation"
"Find opt_early_hints examples"
```

### **Monitoring Systems**
```bash
# Performance monitoring
"Get monitor_performance class examples"
"Show monitor_health system patterns"
"Find monitor_diagnostics automation"

# Memory monitoring
"Show monitor_memory tracking patterns"
"Get memory optimization examples"
```

### **Dashboard Plugin Specific**
```bash
# Permission system
"Show dashboard_permissions best practices"
"Find dashboard_capability patterns"
"Get permission optimization examples"

# Capability checking
"Show current_user_can vs user_can patterns"
"Find WordPress capability optimization"
```

---

## 🛠️ **Advanced Performance Checklist**

### **Modern PHP Features**
- [ ] PHP 8.3+ readonly classes implemented
- [ ] Match expressions used for performance
- [ ] Enums implemented for type safety
- [ ] Named arguments used appropriately

### **Monitoring Systems**
- [ ] Performance monitoring classes active
- [ ] System health monitoring configured
- [ ] Automated diagnostics running
- [ ] Memory monitoring with alerts

### **Specialized Optimization**
- [ ] Composer autoload optimized
- [ ] Early hints implemented (if applicable)
- [ ] Worker mode configured (if using FrankenPHP)
- [ ] Lazy loading patterns implemented

### **Dashboard Plugin Specific**
- [ ] Permission system using `user_groups` and `user_levels` only
- [ ] WordPress capability patterns optimized
- [ ] Dashboard-specific cleanup routines active

---

## 🔗 **INTEGRATION WITH SECURITY PATTERNS**

**CRITICAL**: All patterns in this file MUST integrate with security requirements:
- **Database Operations**: Use `Dashboard_Security_Database` helper instead of direct `$wpdb`
- **Logging**: Use `\Dashboard_Security_Database::log()` instead of `error_log()`
- **AJAX Methods**: Maintain existing security validation patterns
- **Monitoring**: Integrate with security logging system for performance alerts

**Reference**: `ai-performance-optimization-failsafe.mdc` for security integration examples.

---

**Document Version**: 3.0.0 - Advanced Strategies with Intelligent Failsafe Hook  
**Last Updated**: January 19, 2025  
**Compatibility**: WordPress 6.8+, PHP 8.3.17+  
**Specialized For**: Dashboard Plugin, Modern PHP, Advanced Monitoring
**Intelligent Loading**: Enabled with keyword and context triggers

alwaysApply: false
---
