# 🔐 WordPress Security Best Practices - AI Coding Assistant Rules
*Enterprise-level security patterns from PMPro and WP Defender for WordPress plugins and themes*

## Table of Contents
1. [🔒 Nonce Security & CSRF Protection](#nonce-security--csrf-protection) (`input_nonce`)
   - PMPro Admin Form Nonce Pattern
   - PMPro Checkout Nonce Pattern  
   - WP Defender AJAX Nonce Pattern
   - PMPro Multi-Action Nonce Pattern
   - WP Defender Two-Factor Nonce Pattern

2. [🔍 Input Validation & Sanitization](#input-validation--sanitization) (`input_sanitize`)
   - PMPro Comprehensive Input Sanitization
   - PMPro Checkout Field Sanitization
   - WP Defender Data Sanitization Pattern
   - PMPro File Upload Validation
   - PMPro Safelist Validation Pattern

3. [🔐 Output Escaping & XSS Prevention](#output-escaping--xss-prevention) (`output_escape`)
   - PMPro Comprehensive Output Escaping
   - WP Defender Template Output Escaping
   - PMPro Custom wp_kses Implementation
   - WP Defender Error Message Escaping
   - Common Output Escaping Functions Reference

4. [👤 Authentication & Capability Checks](#authentication--capability-checks) (`auth_capability`)
   - PMPro Comprehensive Capability Management
   - WP Defender Permission Trait Pattern
   - PMPro Admin Page Security Pattern
   - PMPro REST API Permission Pattern
   - WP Defender User Role Management

5. [🗄️ Database Security & SQL Injection Prevention](#database-security--sql-injection-prevention) (`db_security`)
   - PMPro Prepared Statement Patterns
   - WP Defender ORM Security Pattern
   - PMPro Search Query Security
   - WP Defender Database Table Creation
   - PMPro Bulk Insert Security Pattern

6. [⚡ Rate Limiting & Spam Protection](#rate-limiting--spam-protection) (`rate_limiting`)
   - PMPro Comprehensive Spam Protection System
   - WP Defender Advanced Rate Limiting System
   - PMPro reCAPTCHA Integration Pattern
   - WP Defender IP Blacklist Management

7. [🔑 Login Security & Mask Protection](#login-security--mask-protection) (`login_security`)
   - PMPro Login Security Integration
   - WP Defender Two-Factor Authentication
   - WP Defender Login Lockout System
   - PMPro Password Security Integration
   - WP Defender Mask Login Protection

8. [📁 File Security & Access Control](#file-security--access-control) (`file_access`)
   - PMPro Secure File Serving System
   - WP Defender Directory Protection System
   - WP Defender Apache Security Rules
   - WP Defender Nginx Security Rules
   - PMPro File Upload Security with Directory Protection

9. [🛡️ Security Headers](#security-headers) (`security_headers`)
   - PMPro HTTPS/SSL Security Implementation
   - WP Defender Comprehensive Security Headers
   - WP Defender Content Security Policy
   - PMPro Nuclear HTTPS Option
   - WP Defender Feature Policy Headers

10. [📊 Error Handling & Logging](#error-handling--logging) (`error_logging`)
    - PMPro Development Debug Logging
    - WP Defender Advanced Debug Logging
    - PMPro User-Friendly Error Handling
    - WP Defender API Error Handling
    - PMPro Conditional Logging Patterns

## 🎯 **AI Assistant Security Index**

### **🔒 Input Security** (`input_*`)
- `input_nonce` - Nonce verification patterns (PMPro admin forms, WP Defender AJAX)
- `input_sanitize` - Input sanitization methods (comprehensive field handling)
- `input_validate` - Data validation techniques (file uploads, form data)
- `input_arrays` - Array data handling (recursive sanitization)
- `input_checkout` - Checkout-specific validation (PMPro patterns)
- `input_files` - File input validation (MIME types, size limits)

### **🔐 Output Security** (`output_*`)
- `output_escape` - XSS prevention patterns (comprehensive escaping)
- `output_templates` - Template output security (WordPress standards)
- `output_json` - JSON output security (AJAX responses)
- `output_attributes` - HTML attribute escaping (form fields)
- `output_urls` - URL output escaping (links, redirects)
- `output_content` - Content output security (wp_kses patterns)

### **👤 Authentication & Authorization** (`auth_*`)
- `auth_capability` - Capability checking (current_user_can patterns)
- `auth_role` - Role-based access (multisite support)
- `auth_session` - Session management (login security)
- `auth_rest` - REST API authentication (method-based permissions)
- `auth_xmlrpc` - XMLRPC authentication (API security)
- `auth_multisite` - Multisite authentication (network capabilities)

### **🗄️ Database Security** (`db_*`)
- `db_security` - Prepared statements (comprehensive SQL injection prevention)
- `db_arrays` - Safe array queries (IN clauses, bulk operations)
- `db_search` - Search query security (LIKE statements)
- `db_tables` - Table creation security (charset, collation)
- `db_bulk` - Bulk operation security (batch processing)
- `db_orm` - ORM security patterns (WP Defender patterns)

### **⚡ Rate Limiting & Spam Protection** (`rate_*`)
- `rate_limiting` - Rate limiting patterns (IP-based, time windows)
- `rate_spam` - Spam protection (transient tracking)
- `rate_captcha` - CAPTCHA integration (reCAPTCHA, Turnstile)
- `rate_lockout` - Account lockout (progressive penalties)
- `rate_whitelist` - IP whitelisting (bypass patterns)
- `rate_country` - Country blocking (geolocation)

### **🔑 Login Security** (`login_*`)
- `login_security` - Login protection (attempt tracking)
- `login_2fa` - Two-factor authentication (TOTP, backup codes)
- `login_lockout` - Login lockout systems (time-based)
- `login_mask` - Login URL masking (custom endpoints)
- `login_session` - Session protection (IP locking)
- `login_password` - Password security (strength requirements)

### **📁 File Security** (`file_*`)
- `file_access` - Direct access prevention (.htaccess rules)
- `file_upload` - Upload validation (MIME types, malware scanning)
- `file_serving` - Secure file serving (membership protection)
- `file_directory` - Directory protection (index files, permissions)
- `file_apache` - Apache security rules (server-level protection)
- `file_nginx` - Nginx security rules (server configuration)

### **🛡️ Security Headers** (`security_*`)
- `security_headers` - HTTP security headers (comprehensive protection)
- `security_csp` - Content Security Policy (XSS prevention)
- `security_hsts` - HSTS implementation (HTTPS enforcement)
- `security_frame` - X-Frame-Options (clickjacking prevention)
- `security_ssl` - SSL/TLS security (certificate validation)
- `security_disclosure` - Information disclosure prevention

### **📊 Error Handling & Logging** (`error_*`)
- `error_logging` - Secure error logging (development patterns)
- `error_handling` - User-friendly error handling (production safe)
- `error_debug` - Debug logging (WP_DEBUG integration)
- `error_api` - API error handling (secure responses)
- `error_conditional` - Conditional logging (environment-based)
- `error_backtrace` - Debug backtrace (development debugging)

### **🎯 Dashboard Plugin Integration** (`dashboard_*`)
- `dashboard_nonce` - Dashboard-specific nonce patterns
- `dashboard_permissions` - Permission checking (PMPro integration)
- `dashboard_ajax` - AJAX security (dashboard endpoints)
- `dashboard_templates` - Template security (child menu protection)
- `dashboard_api` - API integration security (external services)
- `dashboard_canvas` - Canvas security (user data protection)
- `dashboard_capability` - Capability management

---

## 🔒 **Nonce Security & CSRF Protection** (`input_nonce`)

### **PMPro Admin Form Nonce Pattern**
**Pattern Source**: PMPro securitysettings.php, userfields.php
**Index Terms**: `input_nonce`, `admin_forms`, `csrf_protection`

```php
// ✅ GOOD: PMPro admin form nonce verification
// Pattern from paid-memberships-pro/adminpages/securitysettings.php
if ( !empty( $_REQUEST['savesettings'] ) && ( empty( $_REQUEST[ 'pmpro_securitysettings_nonce' ] ) 
    || !check_admin_referer( 'savesettings', 'pmpro_securitysettings_nonce' ) ) ) {
    $msg = -1;
    $msgt = __( "Are you sure you want to do that? Try again.", 'paid-memberships-pro' );
    unset( $_REQUEST[ 'savesettings' ] );
}

// Form generation
wp_nonce_field( 'savesettings', 'pmpro_securitysettings_nonce' );
```

### **PMPro Checkout Nonce Pattern**
**Pattern Source**: PMPro preheaders/checkout.php
**Index Terms**: `input_nonce`, `checkout_security`, `version_check`

```php
// ✅ GOOD: PMPro checkout nonce with version checking
// Pattern from paid-memberships-pro/preheaders/checkout.php
if ( $submit && $pmpro_msgt != "pmpro_error" ) {
    // Check the nonce.
    if ( empty( $_REQUEST['pmpro_checkout_nonce'] ) || ! wp_verify_nonce( sanitize_key( $_REQUEST['pmpro_checkout_nonce'] ), 'pmpro_checkout_nonce' ) ) {
        // Nonce is not valid, but a nonce was only added in the 3.0 checkout template. We only want to show an error if the checkout template is 3.0 or later.
        $loaded_path = pmpro_get_template_path_to_load( 'checkout' );
        $loaded_version = pmpro_get_version_for_page_template_at_path( $loaded_path );
        if ( ! empty( $loaded_version ) && version_compare( $loaded_version, '3.0', '>=' ) ) {
            // Nonce is not valid. Show an error.
            pmpro_setMessage( __( "Nonce security check failed.", 'paid-memberships-pro' ), 'pmpro_error' );
        }
    }
}
```

### **WP Defender AJAX Nonce Pattern**
**Pattern Source**: WP Defender src/class-central.php
**Index Terms**: `input_nonce`, `ajax_security`, `routing`

```php
// ✅ GOOD: WP Defender AJAX nonce verification
// Pattern from wp-defender/src/class-central.php
public function routing() {
    // This is the intention, we will use it to find the data stored in DI.
    $route = HTTP::get( 'route', false );
    $nonce = HTTP::get( '_def_nonce', false );
    if ( empty( $route ) || empty( $nonce ) ) {
        exit;
    }

    $route = wp_unslash( $route );

    // Nonce is not valid.
    if ( ! wp_verify_nonce( $nonce, $route ) ) {
        wp_send_json_error(
            array(
                'message'     => esc_html__( 'Invalid API request.', 'wpdef' ),
                'type_notice' => 'invalid_request',
            )
        );
    }
}
```

### **WP Defender Request Data Nonce Pattern**
**Pattern Source**: WP Defender src/functions.php
**Index Terms**: `input_nonce`, `request_data`, `sanitization`

```php
// ✅ GOOD: WP Defender request data with nonce verification
// Pattern from wp-defender/src/functions.php
function defender_get_data_from_request(
    ?string $key,
    string $source,
    string $nonce_key = '',
    string $nonce_action = ''
) {
    if ( in_array( $source, array( 'r', 'p', 'g' ), true ) ) {
        if (
            ! empty( $nonce_key ) && ! wp_verify_nonce(
                sanitize_text_field( wp_unslash( $_REQUEST[ $nonce_key ] ?? '' ) ),
                $nonce_action
            )
        ) {
            return null;
        }
    }
    // ... rest of function
}
```

### **PMPro AJAX Nonce Creation Pattern**
**Pattern Source**: PMPro includes/checkout.php
**Index Terms**: `input_nonce`, `ajax_creation`, `dynamic_nonce`

```php
// ✅ GOOD: PMPro AJAX nonce creation
// Pattern from paid-memberships-pro/includes/checkout.php
/**
 * AJAX method to get the checkout nonce.
 * Important for correcting the nonce value at checkout if the user is logged in during the same page load.
 */
function pmpro_get_checkout_nonce() {
    // Output the checkout nonce.
    echo esc_html( wp_create_nonce( 'pmpro_checkout_nonce' ) );

    // End the AJAX request.
    exit;
}
add_action( 'wp_ajax_pmpro_get_checkout_nonce', 'pmpro_get_checkout_nonce' );
add_action( 'wp_ajax_nopriv_pmpro_get_checkout_nonce', 'pmpro_get_checkout_nonce' );
```

### **WP Defender Controller Nonce Pattern**
**Pattern Source**: WP Defender src/class-controller.php
**Index Terms**: `input_nonce`, `controller_verification`, `method_check`

```php
// ✅ GOOD: WP Defender controller nonce verification
// Pattern from wp-defender/src/class-controller.php
/**
 * Quick handler to check nonce.
 */
protected function verify_nonce( $intention, $method = 'get' ) {
    $nonce = 'get' === $method ? HTTP::get( '_def_nonce' ) : HTTP::post( '_def_nonce' );
    if ( ! wp_verify_nonce( $nonce, $intention ) ) {
        return false;
    }

    return true;
}
```

### **PMPro Multi-Action Nonce Pattern**
**Pattern Source**: PMPro adminpages/membershiplevels.php
**Index Terms**: `input_nonce`, `multi_action`, `dynamic_actions`

```php
// ✅ GOOD: PMPro multi-action nonce verification
// Pattern from paid-memberships-pro/adminpages/membershiplevels.php
// Process form submissions.
$action = isset( $_REQUEST['action'] ) ? sanitize_text_field( $_REQUEST['action'] ) : false;
if ( ! empty( $action ) && ( empty( sanitize_key( $_REQUEST['pmpro_membershiplevels_nonce'] ) ) || ! check_admin_referer( $action, 'pmpro_membershiplevels_nonce' ) ) ) {
    $page_msg = -1;
    $page_msgt = __( 'Are you sure you want to do that? Try again.', 'paid-memberships-pro' );
    $action = false;
}
switch ( $action ) {
    case 'save_membershiplevel':
        include_once( PMPRO_DIR . '/adminpages/levels/save-level.php' );
        break;
    case 'delete_membership_level':
        include_once( PMPRO_DIR . '/adminpages/levels/delete-level.php' );
        break;
    // ... more cases
}
```

### **WP Defender Two-Factor Nonce Pattern**
**Pattern Source**: WP Defender src/controller/class-two-factor.php
**Index Terms**: `input_nonce`, `two_factor`, `login_security`

```php
// ✅ GOOD: WP Defender two-factor nonce verification
// Pattern from wp-defender/src/controller/class-two-factor.php
public function verify_otp_login_time() {
    if ( 'POST' !== defender_get_data_from_request( 'REQUEST_METHOD', 's' ) ) {
        return;
    }

    $post = defender_get_data_from_request( null, 'p' );
    if ( empty( $post['_wpnonce'] ) || ! wp_verify_nonce( $post['_wpnonce'], 'verify_otp' ) ) {
        wp_die( esc_html__( 'Nonce verification failed.', 'wpdef' ) );
    }

    $token       = HTTP::post( 'login_token' );
    $user_id     = (int) HTTP::post( 'requested_user', 0 );
    $auth_method = HTTP::post( 'auth_method' );
    $password    = HTTP::post( 'password' );
    
    if ( empty( $token ) || empty( $user_id ) || empty( $auth_method ) || empty( $password ) ) {
        wp_die( esc_html__( 'Missing parameter(s)', 'wpdef' ) );
    }
    // ... rest of verification
}
```

---

## 🔍 **Input Validation & Sanitization** (`input_sanitize`)

### **PMPro Comprehensive Input Sanitization Pattern**
**Pattern Source**: PMPro includes/functions.php, preheaders/checkout.php
**Index Terms**: `input_sanitize`, `form_validation`, `comprehensive_sanitization`

```php
// ✅ GOOD: PMPro comprehensive input sanitization
// Pattern from paid-memberships-pro/includes/functions.php
function pmpro_setOption( $s, $v = null, $sanitize_function = 'sanitize_text_field', $autoload = false ) {
    if ( $v === null && isset( $_POST[ $s ] ) ) {
        // phpcs:disable WordPress.Security.ValidatedSanitizedInput.InputNotSanitized
        if ( is_array( $_POST[ $s ] ) ) {
            $v = array_map( $sanitize_function, $_POST[ $s ] );
        } else {
            $v = call_user_func( $sanitize_function, $_POST[ $s ] );
        }
        // phpcs:enable WordPress.Security.ValidatedSanitizedInput.InputNotSanitized
    }

    if ( is_array( $v ) ) {
        $v = implode( ',', $v );
    } elseif ( is_string( $v ) ) {
        $v = trim( $v );
    }

    return update_option( 'pmpro_' . $s, $v, $autoload );
}
```

### **PMPro Checkout Field Sanitization Pattern**
**Pattern Source**: PMPro preheaders/checkout.php
**Index Terms**: `input_sanitize`, `checkout_fields`, `email_validation`

```php
// ✅ GOOD: PMPro checkout field sanitization
// Pattern from paid-memberships-pro/preheaders/checkout.php
if ( isset( $_REQUEST['bphone'] ) ) {
    $bphone = stripslashes( sanitize_text_field( $_REQUEST['bphone'] ) );
} else {
    $bphone = "";
}
if ( isset ( $_REQUEST['bemail'] ) ) {
    $bemail = stripslashes( sanitize_email( $_REQUEST['bemail'] ) );
} elseif ( is_user_logged_in() ) {
    $bemail = $current_user->user_email;
} else {
    $bemail = "";
}
if ( isset( $_REQUEST['bconfirmemail_copy'] ) ) {
    $bconfirmemail = $bemail;
} elseif ( isset( $_REQUEST['bconfirmemail'] ) ) {
    $bconfirmemail = stripslashes( sanitize_email( $_REQUEST['bconfirmemail'] ) );
} elseif ( is_user_logged_in() ) {
    $bconfirmemail = $current_user->user_email;
} else {
    $bconfirmemail = "";
}

// Credit card fields
if ( isset( $_REQUEST['CardType'] ) && ! empty( $_REQUEST['AccountNumber'] ) ) {
    $CardType = sanitize_text_field( $_REQUEST['CardType'] );
} else {
    $CardType = "";
}
if ( isset( $_REQUEST['AccountNumber'] ) ) {
    $AccountNumber = sanitize_text_field( $_REQUEST['AccountNumber'] );
} else {
    $AccountNumber = "";
}
```

### **PMPro Advanced Sanitization Pattern**
**Pattern Source**: PMPro classes/class-pmpro-field.php
**Index Terms**: `input_sanitize`, `field_validation`, `conditional_sanitization`

```php
// ✅ GOOD: PMPro advanced field sanitization
// Pattern from paid-memberships-pro/classes/class-pmpro-field.php
function get_value_from_request() {
    if ( isset( $_REQUEST[ $this->name ] ) ) {
        $value = $_REQUEST[$this->name]; // phpcs:ignore WordPress.Security.ValidatedSanitizedInput.InputNotSanitized
    } elseif ( isset( $_REQUEST[ $this->name . '_checkbox' ] ) && $this->type == 'checkbox' ) {
        // Empty checkbox.
        $value = 0;
    } elseif ( ! empty( $_REQUEST[ $this->name . '_checkbox' ] ) && in_array( $this->type, array( 'checkbox_grouped', 'select2' ) ) )    {
        // Empty group checkboxes or select2.
        $value = array();
    } elseif ( isset( $_FILES[$this->name] ) && $this->type == 'file' ) {
        // File field.
        $value = $_FILES[$this->name]['name']; // phpcs:ignore WordPress.Security.ValidatedSanitizedInput.InputNotSanitized
    }  elseif ( isset( $_SESSION[$this->name] ) ) {
        // Value stored in session.
        if ( is_array( $_SESSION[$this->name] ) && isset( $_SESSION[$this->name]['name'] ) ) {
            // File field in session.
            $_FILES[$this->name] = $_SESSION[$this->name]; // phpcs:ignore WordPress.Security.ValidatedSanitizedInput.InputNotSanitized
            $value = $_SESSION[$this->name]['name']; // phpcs:ignore WordPress.Security.ValidatedSanitizedInput.InputNotSanitized
        } else {
            // Other field in session.
            $value = $_SESSION[$this->name]; // phpcs:ignore WordPress.Security.ValidatedSanitizedInput.InputNotSanitized
        }

        // Clean up session.
        unset($_SESSION[$this->name]);
    } else {
        // No value found.
        return null;
    }

    // Sanitize the value if needed.
    if ( ! empty( $field->sanitize ) ) {
        if ( $this->type == 'textarea' ) {
            $value = sanitize_textarea_field( $value );
        } elseif ( is_array( $value ) ) {
            $value = array_map( 'sanitize_text_field', $value );
        } else {
            $value = sanitize_text_field( $value );
        }
    }

    return $value;
}
```

### **PMPro File Upload Validation Pattern**
**Pattern Source**: PMPro includes/functions.php
**Index Terms**: `input_sanitize`, `file_upload`, `mime_validation`

```php
// ✅ GOOD: PMPro file upload validation
// Pattern from paid-memberships-pro/includes/functions.php
function pmpro_check_upload( $file_index ) {
    // Check if the file was uploaded.
    if ( empty( $_FILES[ $file_index ] ) ) {
        return new WP_Error( 'pmpro_upload_error', __( 'No file was uploaded.', 'paid-memberships-pro' ) );
    }

    // Get the file info.
    $file = array_map( 'sanitize_text_field', $_FILES[ $file_index ] );
    if ( empty( $file['name'] ) ) {
        return new WP_Error( 'pmpro_upload_error', __( 'No file name found.', 'paid-memberships-pro' ) );
    }

    // If the current user cannot does not have the unfiltered_upload permission, check if the file is an allowed file type.
    if ( ! current_user_can( 'unfiltered_upload' ) ) {
        $filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'] );
        if ( empty( $filetype['ext'] ) || empty( $filetype['type'] ) ) {
            return new WP_Error( 'pmpro_upload_error', __( 'Invalid file type.', 'paid-memberships-pro' ) );
        }
    }

    // If this is an upload for a user field, we need to perform additional checks.
    $field = PMPro_Field_Group::get_field( $file_index );
    if ( ! empty( $field) ) {
        // First, make sure that this is a 'file' field.
        if ( $field->type !== 'file' ) {
            return new WP_Error( 'pmpro_upload_error', __( 'Invalid field input.', 'paid-memberships-pro' ) );
        }

        // Check the file type against the allowed types.
        $allowed_mime_types = ! empty( $field->allowed_file_types ) ? array_map( 'sanitize_text_field', explode( ',', $field->allowed_file_types ) ) : array();

        //Remove fullstops from the beginning of the allowed file types.
        $allowed_mime_types = array_map( function( $type ) {
            return ltrim( $type, '.' );
        }, $allowed_mime_types );

        // Check the file type against the allowed types. If empty allowed mimes, assume any file upload is okay.
        if ( ! empty( $allowed_mime_types ) && ! in_array( $filetype['ext'], $allowed_mime_types ) ) {
            return new WP_Error( 'pmpro_upload_file_type_error', sprintf( esc_html__( 'Invalid file type. Please try uploading the file type(s): %s', 'paid-memberships-pro' ), implode( ',' ,$allowed_mime_types ) ) );
        }
        
        // Check if the file upload is too big to upload.
        if ( $field->max_file_size > 0 ) {
            $upload_max_file_size_in_bytes = $field->max_file_size * 1024 * 1024;
            if ( $file['size'] > $upload_max_file_size_in_bytes ) {
                return new WP_Error( 'pmpro_upload_file_size_error', sprintf( esc_html__( 'File size is too large for %s. Please upload files smaller than %dMB.', 'paid-memberships-pro' ), $field->label, $field->max_file_size ) );
            }
        }
    }

    return true;
}
```

### **WP Defender Data Sanitization Pattern**
**Pattern Source**: WP Defender src/functions.php
**Index Terms**: `input_sanitize`, `recursive_sanitization`, `data_validation`

```php
// ✅ GOOD: WP Defender recursive data sanitization
// Pattern from wp-defender/src/functions.php
function defender_sanitize_data( $data ) {
    foreach ( $data as $key => &$value ) {
        if ( is_array( $value ) ) {
            $value = defender_sanitize_data( $value );
        } else {
            $value = sanitize_textarea_field( $value );
        }
    }

    return $data;
}

// Advanced request data handling with nonce verification
function defender_get_data_from_request(
    ?string $key,
    string $source,
    string $nonce_key = '',
    string $nonce_action = ''
) {
    if ( in_array( $source, array( 'r', 'p', 'g' ), true ) ) {
        if (
            ! empty( $nonce_key ) && ! wp_verify_nonce(
                sanitize_text_field( wp_unslash( $_REQUEST[ $nonce_key ] ?? '' ) ),
                $nonce_action
            )
        ) {
            return null;
        }
    }
    
    // Handle different data sources
    switch ( $source ) {
        case 'r':
            $data = $_REQUEST;
            break;
        case 'p':
            $data = $_POST;
            break;
        case 'g':
            $data = $_GET;
            break;
        case 's':
            $data = $_SERVER;
            break;
        case 'f':
            $data = $_FILES;
            break;
        default:
            $data = array();
            break;
    }

    if ( empty( $key ) ) {
        return $data;
    } elseif ( 's' === $source ) {
        return sanitize_text_field( wp_unslash( $data[ $key ] ?? '' ) );
    } elseif ( 'f' === $source && 'file' === $key && isset( $data[ $key ] ) ) {
        if ( ! empty( $data[ $key ]['name'] ) ) {
            $data[ $key ]['name'] = sanitize_file_name( $data[ $key ]['name'] );
        }
        return $data[ $key ];
    }

    return sanitize_text_field( wp_unslash( $data[ $key ] ?? '' ) );
}
```

### **WP Defender Request Component Pattern**
**Pattern Source**: WP Defender framework/component/class-request.php
**Index Terms**: `input_sanitize`, `request_filtering`, `type_casting`

```php
// ✅ GOOD: WP Defender request component with filtering
// Pattern from wp-defender/framework/component/class-request.php
public function get_data( $filters = array() ) {
    if ( empty( $filters ) ) {
        return $this->data;
    }
    $data = array();
    foreach ( $filters as $key => $rule ) {
        if ( ! isset( $this->data[ $key ] ) ) {
            continue; // Moving on.
        }
        // Mandatory.
        $type     = $rule['type'];
        $sanitize = $rule['sanitize'] ?? null;

        $value = $this->data[ $key ];
        // Cast.
        settype( $value, $type );
        if ( ! is_array( $sanitize ) ) {
            $sanitize = array( $sanitize );
        }
        foreach ( $sanitize as $function ) {
            if ( null !== $function && function_exists( $function ) ) {
                if ( is_array( $value ) ) {
                    $value = $this->sanitize_array( $value, $function );
                } else {
                    $value = $function( $value );
                }
            }
        }
        $data[ $key ] = $value;
    }

    return $data;
}

// Recursive array sanitization
protected function sanitize_array( $arr, $sanitize ) {
    foreach ( $arr as &$value ) {
        if ( is_array( $value ) ) {
            $value = $this->sanitize_array( $value, $sanitize );
        } else {
            $value = $sanitize( $value );
        }
    }

    return $arr;
}
```

### **WP Defender HTTP Helper Pattern**
**Pattern Source**: WP Defender framework/helper/class-http.php
**Index Terms**: `input_sanitize`, `http_helpers`, `automatic_sanitization`

```php
// ✅ GOOD: WP Defender HTTP helper with automatic sanitization
// Pattern from wp-defender/framework/helper/class-http.php
public static function get( $key, $default_name = null, bool $strict = false ) {
    $value = defender_get_data_from_request( $key, 'g' ) ?? $default_name;
    if ( true === $strict && empty( $value ) ) {
        $value = $default_name;
    }
    if ( is_array( $value ) ) {
        $value = defender_sanitize_data( $value );
    } elseif ( is_string( $value ) ) {
        $value = sanitize_textarea_field( $value );
    }

    return $value;
}

public static function post( $key, $default_name = null ) {
    $value = defender_get_data_from_request( $key, 'p' ) ?? $default_name;
    if ( is_array( $value ) ) {
        $value = defender_sanitize_data( $value );
    } elseif ( is_string( $value ) ) {
        $value = sanitize_textarea_field( $value );
    }

    return $value;
}
```

### **WP Defender Settings Validation Pattern**
**Pattern Source**: WP Defender src/controller/class-blacklist.php
**Index Terms**: `input_sanitize`, `settings_validation`, `data_filtering`

```php
// ✅ GOOD: WP Defender controller settings with validation
// Pattern from wp-defender/src/controller/class-blacklist.php
public function save_settings( Request $request ) {
    $data = $request->get_data(
        array(
            'country_blacklist'  => array(
                'type' => 'array',
            ),
            'country_whitelist'  => array(
                'type' => 'array',
            ),
            'ip_blacklist'       => array(
                'type'     => 'string',
                'sanitize' => 'sanitize_textarea_field',
            ),
            'ip_whitelist'       => array(
                'type'     => 'string',
                'sanitize' => 'sanitize_textarea_field',
            ),
            'ip_lockout_message' => array(
                'type'     => 'string',
                'sanitize' => 'sanitize_textarea_field',
            ),
            'http_ip_header'     => array(
                'type'     => 'string',
                'sanitize' => 'sanitize_text_field',
            ),
            'trusted_proxies_ip' => array(
                'type'     => 'string',
                'sanitize' => 'sanitize_textarea_field',
            ),
        )
    );
    $this->model->import( $data );
    if ( $this->model->validate() ) {
        $this->model->save();
        // ... rest of method
    }
}
```

### **PMPro Safelist Validation Pattern**
**Pattern Source**: PMPro includes/functions.php
**Index Terms**: `input_sanitize`, `safelist_validation`, `whitelist_check`

```php
// ✅ GOOD: PMPro safelist validation
// Pattern from paid-memberships-pro/includes/functions.php
function pmpro_sanitize_with_safelist( $needle, $safelist ) {
    if ( ! in_array( $needle, $safelist ) ) {
        return false;
    } else {
        return $needle;
    }
}

// Generic sanitization function
function pmpro_sanitize( $value, $field = null ) {
    if ( is_array( $value ) ) {
        foreach ( $value as $key => $val ) {
            $value[ $key ] = pmpro_sanitize( $val );
        }
    }

    if ( is_object( $value ) ) {
        foreach ( $value as $key => $val ) {
            $value->{$key} = pmpro_sanitize( $val );
        }
    }

    if ( ! empty( $field ) && ! empty( $field->type ) && $field->type === 'textarea' ) {
        $value = sanitize_textarea_field( $value );
    } elseif ( ( ! is_array( $value ) ) && ctype_alpha( $value ) ||
         ( ( ! is_array( $value ) ) && strtotime( $value ) ) ||
         ( ( ! is_array( $value ) ) && is_string( $value ) ) ||
         ( ( ! is_array( $value ) ) && is_numeric( $value) )
    ) {
        $value = sanitize_text_field( $value );
    }

    return $value;
}
```

---

## 🔒 **Output Escaping & XSS Prevention** (`output_escape`)

### **PMPro Comprehensive Output Escaping Pattern**
**Pattern Source**: PMPro adminpages/advancedsettings.php, classes/class-pmpro-field.php
**Index Terms**: `output_escape`, `xss_prevention`, `attribute_escaping`

```php
// ✅ GOOD: PMPro comprehensive output escaping
// Pattern from paid-memberships-pro/adminpages/advancedsettings.php
?>
<select id="<?php echo esc_attr( $field['field_name'] ); ?>" 
        name="<?php echo esc_attr( $field['field_name'] ); ?>">
    <?php foreach ($field['options'] as $key => $option) { ?>
        <option value="<?php echo esc_attr($key); ?>" 
                <?php selected($key, get_option( 'pmpro_' . $field['field_name'] ));?>>
            <?php echo esc_textarea($option); ?>
        </option>
    <?php } ?>
</select>
<p class="description">
    <?php echo wp_kses( $field['description'], $allowed_html ); ?>
</p>
<?php

// ✅ GOOD: PMPro field display with URL handling
// Pattern from paid-memberships-pro/classes/class-pmpro-field.php
function displayValue( $value, $echo = true ) {
    $output = '';
    $allowed_html = array();
    
    if ( wp_http_validate_url( $value ) ) {
        $output = '<a href="' . esc_url( $value ) . '" target="_blank">' . 
                  esc_html( $value ) . '</a>';
        $allowed_html = array(
            'a' => array(
                'href'   => true,
                'target' => true,
            ),
        );
    } else {
        $output = esc_html( $value );
    }
    
    if ( $echo ) {
        echo wp_kses( $output, $allowed_html );
    } else {
        return wp_kses( $output, $allowed_html );
    }
}
```

### **WP Defender Template Output Escaping Pattern**
**Pattern Source**: WP Defender framework/base/class-controller.php, src/functions.php
**Index Terms**: `output_escape`, `template_security`, `content_escaping`

```php
// ✅ GOOD: WP Defender template content escaping
// Pattern from wp-defender/framework/base/class-controller.php
public function render( $view_file, $params = array(), $output = true ) {
    // ... validation logic ...
    
    $content = $view->render( $view_file, $params );
    
    if ( ! empty( $this->layout ) ) {
        $content = $template->render(
            $this->layout,
            array_merge(
                $params,
                array(
                    'controller' => $this,
                    'contents'   => $content,
                )
            )
        );
    }
    
    if ( false === $output ) {
        return $content;
    }
    
    echo wp_kses_post( $content );
}

// ✅ GOOD: WP Defender asset URL escaping
// Pattern from wp-defender/src/functions.php
function defender_asset_url( string $path, bool $print_url = false ) {
    $url = untrailingslashit( WP_DEFENDER_BASE_URL ) . $path;
    
    if ( empty( $print_url ) ) {
        return $url;
    }
    
    echo esc_url_raw( $url );
}
```

### **PMPro Custom wp_kses Implementation**
**Pattern Source**: PMPro includes/functions.php, includes/notifications.php
**Index Terms**: `output_escape`, `custom_kses`, `context_escaping`

```php
// ✅ GOOD: PMPro custom wp_kses with context
// Pattern from paid-memberships-pro/includes/functions.php
function pmpro_kses( $original_string, $context = 'email' ) {
    $context = 'pmpro_' . $context;
    $sanitized_string = $original_string;
    
    if ( 'pmpro_email' === $context ) {
        // Always remove script tags and their contents
        $sanitized_string = preg_replace( 
            '@<script[^>]*?>.*?</script>@si', 
            '', 
            $sanitized_string 
        );
    }
    
    $sanitized_string = wp_kses( $sanitized_string, $context );
    
    return apply_filters( 'pmpro_kses', $sanitized_string, $original_string, $context );
}

// ✅ GOOD: PMPro notification escaping
// Pattern from paid-memberships-pro/includes/notifications.php
?>
<div class="pmpro_notification" id="<?php echo esc_attr( $notification->id ); ?>">
    <h3><?php echo esc_html( $notification->title ); ?></h3>
    <?php 
        $allowed_html = array(
            'a' => array(
                'class' => array(),
                'href' => array(),
                'target' => array(),
                'title' => array(),
            ),
            'p' => array('class' => array()),
            'b' => array('class' => array()),
            'em' => array('class' => array()),
            'br' => array(),
            'strong' => array(),
        );
        echo wp_kses( $notification->content, $allowed_html );
    ?>
</div>
<?php
```

### **WP Defender Error Message Escaping**
**Pattern Source**: WP Defender src/class-central.php, src/controller/class-scan.php
**Index Terms**: `output_escape`, `error_messages`, `json_escaping`

```php
// ✅ GOOD: WP Defender AJAX error escaping
// Pattern from wp-defender/src/class-central.php
public function routing() {
    if ( ! wp_verify_nonce( $nonce, $route ) ) {
        wp_send_json_error(
            array(
                'message'     => esc_html__( 'Invalid API request.', 'wpdef' ),
                'type_notice' => 'invalid_request',
            )
        );
    }
    
    if ( ! is_user_logged_in() && $this->is_private_access( $route ) ) {
        $data = array(
            'message'     => esc_html__( 'Your session expired. Please login to continue.', 'wpdef' ),
            'type_notice' => 'session_out',
        );
        
        if ( $this->is_redirect( $route ) ) {
            $data['redirect'] = wp_login_url( wp_get_referer() );
        }
        
        wp_send_json_error( $data );
    }
}

// ✅ GOOD: WP Defender vulnerability notice escaping
// Pattern from wp-defender/src/component/class-scan.php
printf(
    '<tr class="plugin-update-tr%s" id="vulnerability-%s" data-slug="%s" data-plugin="%s">
     <td colspan="%s" class="plugin-update colspanchange plugin-vulnerability">
     <div class="update-message notice inline %s notice-alt"><p>',
    esc_attr( $active_class ),
    esc_attr( $plugin_data['slug'] ),
    esc_attr( $plugin_data['slug'] ),
    esc_attr( $file ),
    esc_attr( $wp_list_table->get_column_count() ),
    'notice-error'
);

$notice = sprintf(
    esc_html__( '%s has detected a vulnerability in this plugin.', 'wpdef' ),
    '<b>' . esc_html__( 'Defender Pro', 'wpdef' ) . '</b>'
);
```

### **PMPro Block Render Escaping**
**Pattern Source**: PMPro blocks/src/single-level-description/render.php
**Index Terms**: `output_escape`, `block_rendering`, `wrapper_attributes`

```php
// ✅ GOOD: PMPro block rendering with escaping
// Pattern from paid-memberships-pro/blocks/src/single-level-description/render.php
$level_description = wp_kses_post( 
    apply_filters( 'pmpro_level_description', $level_description, $level ) 
);

// Get wrapper attributes (already escaped by WordPress)
$wrapper_attributes = get_block_wrapper_attributes( 
    array( 'class' => implode( ' ', $classes ) ) 
);

// Echo the complete block with level description
echo sprintf(
    '<%1$s %2$s>%3$s</%1$s>',
    esc_attr( $tag_name ),
    $wrapper_attributes, // Already escaped by WordPress
    wp_kses_post( $level_description )
);
```

### **WP Defender JavaScript Escaping**
**Pattern Source**: WP Defender assets/js/shared-ui.js, src/traits/defender-bootstrap.php
**Index Terms**: `output_escape`, `js_escaping`, `localize_script`

```php
// ✅ GOOD: WP Defender script localization escaping
// Pattern from wp-defender/src/traits/defender-bootstrap.php
wp_localize_script(
    'def-vue',
    'defender',
    array(
        'home_url'    => network_home_url(),
        'site_url'    => network_site_url(),
        'admin_url'   => network_admin_url(),
        'upgrade_title' => esc_html__( 'UPGRADE TO PRO', 'wpdef' ),
        'wpmudev_url' => WP_DEFENDER_DOCS_LINK,
    )
);

// ✅ GOOD: JavaScript markup escaping utility
// Pattern from wp-defender/assets/js/shared-ui.js
Utils.escapeMarkup = function (markup) {
    var replaceMap = {
        '\\': '&#92;',
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#39;',
        '/': '&#47;'
    };
    
    if (typeof markup !== 'string') {
        return markup;
    }
    
    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
        return replaceMap[match];
    });
};
```

### **Common Output Escaping Functions Reference**
**Pattern Source**: PMPro and WP Defender comprehensive usage
**Index Terms**: `output_escape`, `escaping_functions`, `reference_guide`

```php
// ✅ GOOD: Comprehensive escaping function reference
// Based on PMPro and WP Defender patterns

// HTML Content Escaping
echo esc_html( $text );                    // Plain text content
echo esc_html__( 'Text', 'domain' );      // Internationalized text
echo esc_textarea( $content );             // Textarea content
echo wp_kses_post( $html );                // Post content with allowed HTML
echo wp_kses( $content, $allowed_html );   // Custom allowed HTML

// Attribute Escaping
echo esc_attr( $attribute );               // HTML attributes
echo esc_attr__( 'Text', 'domain' );      // Internationalized attributes

// URL Escaping
echo esc_url( $url );                      // Display URLs
echo esc_url_raw( $url );                  // Database/redirect URLs

// JavaScript Escaping
echo esc_js( $js_string );                 // JavaScript strings
wp_localize_script( 'handle', 'object', $escaped_data );

// Database Escaping
$wpdb->prepare( "SELECT * FROM table WHERE id = %d", $id );
echo esc_sql( $value );                    // SQL values (rare use)

// ❌ BAD: Never do this
echo $_POST['data'];                       // Direct output
echo $user_input;                          // Unescaped user input
echo "<script>alert('$data')</script>";    // Inline scripts
```

---

## 🔐 **Authentication & Capability Checks** (`auth_capability`)

### **PMPro Comprehensive Capability Management**
**Pattern Source**: PMPro includes/capabilities.php, includes/adminpages.php
**Index Terms**: `auth_capability`, `capability_management`, `role_based_access`

```php
// ✅ GOOD: PMPro capability definition and management
// Pattern from paid-memberships-pro/includes/capabilities.php
function pmpro_get_capability_defs($role) {
    $cap_array = array(
        'pmpro_memberships_menu',
        'pmpro_dashboard',
        'pmpro_membershiplevels',
        'pmpro_edit_members',
        'pmpro_pagesettings',
        'pmpro_paymentsettings',
        'pmpro_securitysettings',
        'pmpro_emailsettings',
        'pmpro_reports',
        'pmpro_orders',
        'pmpro_discountcodes',
        'pmpro_userfields',
        'pmpro_updates',
    );
    
    return apply_filters( "pmpro_assigned_{$role}_capabilities", $cap_array );
}

// ✅ GOOD: PMPro admin page access control
// Pattern from paid-memberships-pro/includes/adminpages.php
function pmpro_add_pages() {
    $pmpro_caps = pmpro_getPMProCaps();
    
    // Find the first capability the user has access to
    foreach( $pmpro_caps as $cap ) {
        if( current_user_can( $cap ) ) {
            $top_menu_cap = $cap;
            break;
        }
    }
    
    if( empty( $top_menu_cap ) ) {
        return; // No access to any PMPro pages
    }
    
    // Add menu pages with proper capability checks
    add_menu_page( 
        __( 'Memberships', 'paid-memberships-pro' ), 
        __( 'Memberships', 'paid-memberships-pro' ), 
        'pmpro_memberships_menu', 
        'pmpro-dashboard', 
        $top_menu_cap, 
        'dashicons-groups', 
        30 
    );
    
    add_submenu_page( 
        'pmpro-dashboard', 
        __( 'Members', 'paid-memberships-pro' ), 
        __( 'Members', 'paid-memberships-pro' ), 
        'pmpro_memberslist', 
        'pmpro-memberslist', 
        'pmpro_memberslist' 
    );
}
```

### **WP Defender Permission Trait Pattern**
**Pattern Source**: WP Defender src/traits/permission.php, src/class-central.php
**Index Terms**: `auth_capability`, `permission_trait`, `ajax_security`

```php
// ✅ GOOD: WP Defender permission trait
// Pattern from wp-defender/src/traits/permission.php
trait Permission {
    /**
     * Check if the current user have permission for execute an action.
     *
     * @return bool
     */
    public function check_permission() {
        if ( ! is_user_logged_in() ) {
            return false;
        }
        
        $cap = is_multisite() ? 'manage_network_options' : 'manage_options';
        
        return current_user_can( $cap );
    }
}

// ✅ GOOD: WP Defender AJAX routing with permission checks
// Pattern from wp-defender/src/class-central.php
public function routing() {
    $route = HTTP::get( 'route', false );
    $nonce = HTTP::get( '_def_nonce', false );
    
    if ( empty( $route ) || empty( $nonce ) ) {
        exit;
    }
    
    // Check if user is logged in for private routes
    if ( ! is_user_logged_in() && $this->is_private_access( $route ) ) {
        $data = array(
            'message'     => esc_html__( 'Your session expired. Please login to continue.', 'wpdef' ),
            'type_notice' => 'session_out',
        );
        
        if ( $this->is_redirect( $route ) ) {
            $data['redirect'] = wp_login_url( wp_get_referer() );
        }
        
        wp_send_json_error( $data );
    }
    
    // Verify nonce
    if ( ! wp_verify_nonce( $nonce, $route ) ) {
        wp_send_json_error(
            array(
                'message'     => esc_html__( 'Invalid API request.', 'wpdef' ),
                'type_notice' => 'invalid_request',
            )
        );
    }
    
    // Check permissions for private routes
    if ( $is_private && ! $this->check_permission() ) {
        wp_send_json_error(
            array(
                'message'     => esc_html__( 'You shall not pass.', 'wpdef' ),
                'type_notice' => 'not_allowed',
            )
        );
    }
}
```

### **PMPro Admin Page Security Pattern**
**Pattern Source**: PMPro adminpages/securitysettings.php, adminpages/membershiplevels.php
**Index Terms**: `auth_capability`, `admin_security`, `nonce_verification`

```php
// ✅ GOOD: PMPro admin page security implementation
// Pattern from paid-memberships-pro/adminpages/securitysettings.php
<?php
// Only admins can access this page
if( !function_exists( "current_user_can" ) || 
    ( !current_user_can( "manage_options" ) && 
      !current_user_can( "pmpro_securitysettings" ) ) ) {
    die( esc_html__( "You do not have permissions to perform this action.", 'paid-memberships-pro' ) );
}

// Bail if nonce field isn't set
if ( !empty( $_REQUEST['savesettings'] ) && 
     ( empty( $_REQUEST[ 'pmpro_securitysettings_nonce' ] ) || 
       !check_admin_referer( 'savesettings', 'pmpro_securitysettings_nonce' ) ) ) {
    $msg = -1;
    $msgt = __( "Are you sure you want to do that? Try again.", 'paid-memberships-pro' );
    unset( $_REQUEST[ 'savesettings' ] );
}

// Save settings only after security checks pass
if( !empty( $_REQUEST['savesettings'] ) ) {
    pmpro_setOption( "spamprotection", intval( $_POST['spamprotection'] ) );
    
    if ( isset( $_POST['use_ssl'] ) ) {
        pmpro_setOption( "use_ssl", intval( $_POST['use_ssl'] ) );
    }
    
    do_action( 'pmpro_save_security_settings' );
    
    $msg = true;
    $msgt = __("Your security settings have been updated.", 'paid-memberships-pro' );
}
```

### **WP Defender Controller Base Pattern**
**Pattern Source**: WP Defender framework/base/class-controller.php
**Index Terms**: `auth_capability`, `controller_security`, `multisite_capability`

```php
// ✅ GOOD: WP Defender controller registration with capability checks
// Pattern from wp-defender/framework/base/class-controller.php
public function register_page( $title, $slug, $callback, $parent_slug = null, $icon = null, $menu_title = '' ) {
    $hook       = is_multisite() ? 'network_admin_menu' : 'admin_menu';
    $menu_title = '' !== $menu_title ? $menu_title : $title;
    
    $function = function () use ( $title, $slug, $callback, $parent_slug, $icon, $menu_title ) {
        // Different capabilities for multisite vs single site
        $cap = is_multisite() ? 'manage_network_options' : 'manage_options';
        
        if ( null === $parent_slug ) {
            $page_hook = add_menu_page( $title, $menu_title, $cap, $slug, $callback, $icon );
        } else {
            $page_hook = add_submenu_page( $parent_slug, $title, $menu_title, $cap, $slug, $callback );
        }
        
        add_action( 'load-' . $page_hook, array( $this, 'trigger_load_action' ) );
    };
    
    add_action( $hook, $function );
}
```

### **PMPro REST API Permission Pattern**
**Pattern Source**: PMPro includes/rest-api.php
**Index Terms**: `auth_capability`, `rest_api_security`, `method_based_permissions`

```php
// ✅ GOOD: PMPro REST API permissions with method-based checks
// Pattern from paid-memberships-pro/includes/rest-api.php
function pmpro_rest_api_get_permissions_check( $request ) {
    $method = $request->get_method();
    $route = $request->get_route();
    
    // Default to requiring pmpro_edit_members capability
    $permission = current_user_can( 'pmpro_edit_members' );
    
    // Check other caps for specific routes
    $route_caps = array(
        '/pmpro/v1/membership_level' => array(
            'GET' => true,
            'POST' => 'pmpro_membershiplevels',
            'PUT' => 'pmpro_membershiplevels',
            'PATCH' => 'pmpro_membershiplevels',
            'DELETE' => 'pmpro_membershiplevels',
        ),
        '/pmpro/v1/membership_levels' => true,
        '/pmpro/v1/discount_code' => 'pmpro_discountcodes',
        '/pmpro/v1/order' => 'pmpro_orders',
        '/pmpro/v1/me' => true,
        '/pmpro/v1/post_restrictions' => array(
            'capability' => 'edit_post',
            'request_param' => 'post_id',
        ),
    );
    
    $route_caps = apply_filters( 'pmpro_rest_api_route_capabilities', $route_caps, $request );
    
    // Check if we have a specific permission for this route/method
    if ( isset( $route_caps[$route] ) ) {
        if ( is_array( $route_caps[$route] ) && isset( $route_caps[$route][$method] ) ) {
            $permission_to_check = $route_caps[$route][$method];
        } elseif ( is_array( $route_caps[$route] ) && isset( $route_caps[$route]['capability'] ) ) {
            // Check capability for specific post/user ID
            $permission = current_user_can( 
                $route_caps[$route]['capability'], 
                $request->get_param( $route_caps[$route]['request_param'] ) 
            );
        } else {
            $permission_to_check = $route_caps[$route];
        }
        
        if ( isset( $permission_to_check ) ) {
            if ( $permission_to_check === true || $permission_to_check === false ) {
                $permission = $permission_to_check;
            } else {
                $permission = current_user_can( $permission_to_check );
            }
        }
    }
    
    return apply_filters( 'pmpro_rest_api_permissions', $permission, $request );
}
```

### **WP Defender User Role Management**
**Pattern Source**: WP Defender src/traits/user.php, src/component/class-strong-password.php
**Index Terms**: `auth_capability`, `user_role_management`, `multisite_roles`

```php
// ✅ GOOD: WP Defender user role management with multisite support
// Pattern from wp-defender/src/traits/user.php
trait User {
    public $super_admin_slug = 'super_admin';
    
    /**
     * Get user roles including super admin for multisite
     */
    public function get_roles( WP_User $user ): array {
        $user_roles = (array) $user->roles;
        
        // If user is super admin in multisite
        if ( is_multisite() && is_super_admin( $user->ID ) && 
             ! in_array( $this->super_admin_slug, $user_roles, true ) ) {
            $user_roles[] = $this->super_admin_slug;
        }
        
        return $user_roles;
    }
    
    /**
     * Get all roles editable by current user
     */
    public function get_all_editable_roles(): array {
        $editable_roles = wp_list_pluck( get_editable_roles(), 'name' );
        
        if ( is_multisite() && is_super_admin() ) {
            $editable_roles = array_merge(
                array( $this->super_admin_slug => 'Super Admin' ),
                $editable_roles
            );
        }
        
        return $editable_roles;
    }
    
    /**
     * Check if user has admin credentials
     */
    public function is_admin( $user ): bool {
        if ( $user ) {
            if ( is_multisite() ) {
                if ( user_can( $user, 'manage_network' ) ) {
                    return true;
                }
            } elseif ( user_can( $user, 'manage_options' ) ) {
                return true;
            }
        }
        
        return false;
    }
}
```

### **PMPro XMLRPC Security Pattern**
**Pattern Source**: PMPro includes/xmlrpc.php
**Index Terms**: `auth_capability`, `xmlrpc_security`, `api_authentication`

```php
// ✅ GOOD: PMPro XMLRPC authentication and capability checks
// Pattern from paid-memberships-pro/includes/xmlrpc.php
function pmpro_xmlrpc_getMembershipLevelForUser($args) {
    $username = $args[0];
    $password = $args[1];
    $user_id = $args[2]; // optional user id
    
    global $wp_xmlrpc_server;
    
    // Verify credentials
    if ( !$user = $wp_xmlrpc_server->login($username, $password) ) {
        return $wp_xmlrpc_server->error;
    }
    
    // Check capabilities - admin or specific XMLRPC permission
    if( !user_can($user->ID, "manage_options") && 
        !user_can($user->ID, "pmpro_xmlrpc") ) {
        return "ERROR: User does not have access to the PMPro XMLRPC methods.";
    }
    
    // Default to logged in user if no user_id is given
    if( empty($user_id) ) {
        $user_id = $user->ID;
    }
    
    $membership_level = pmpro_getMembershipLevelForUser($user_id);
    
    return $membership_level;
}
```

### **Common Authentication Patterns Reference**
**Pattern Source**: PMPro and WP Defender comprehensive usage
**Index Terms**: `auth_capability`, `authentication_patterns`, `security_reference`

```php
// ✅ GOOD: Comprehensive authentication patterns reference
// Based on PMPro and WP Defender patterns

// Basic Admin Page Protection
if ( !function_exists("current_user_can") || 
     !current_user_can("manage_options") ) {
    die( esc_html__( "You do not have permissions to perform this action.", 'domain' ) );
}

// Multiple Capability Check
if ( !current_user_can("manage_options") && 
     !current_user_can("custom_capability") ) {
    die( esc_html__( "Access denied.", 'domain' ) );
}

// Multisite Capability Check
$cap = is_multisite() ? 'manage_network_options' : 'manage_options';
if ( !current_user_can( $cap ) ) {
    wp_die( esc_html__( 'Insufficient permissions.', 'domain' ) );
}

// AJAX Authentication
if ( !is_user_logged_in() ) {
    wp_send_json_error( array(
        'message' => esc_html__( 'Please log in to continue.', 'domain' )
    ) );
}

// Nonce + Capability Check
if ( !wp_verify_nonce( $_POST['nonce'], 'action_name' ) || 
     !current_user_can( 'required_capability' ) ) {
    wp_send_json_error( array(
        'message' => esc_html__( 'Security check failed.', 'domain' )
    ) );
}

// User-specific Capability Check
if ( !user_can( $user_id, 'edit_posts' ) ) {
    return new WP_Error( 'insufficient_permissions', 
        esc_html__( 'You cannot edit this content.', 'domain' ) );
}

// Role-based Access Control
$user_roles = (array) $user->roles;
$allowed_roles = array( 'administrator', 'editor', 'custom_role' );
if ( empty( array_intersect( $user_roles, $allowed_roles ) ) ) {
    wp_die( esc_html__( 'Your user role is not authorized.', 'domain' ) );
}

// ❌ BAD: Never do this
if ( $_POST['admin_check'] == 'true' ) {          // Bypassable client-side check
    // Admin functionality
}
if ( $user->user_login == 'admin' ) {             // Username-based access
    // Admin functionality  
}
// No capability checks at all                    // Missing security
```

---

## 🛡️ **Database Security & SQL Injection Prevention** (`db_security`)

### **PMPro Prepared Statement Patterns**
**Pattern Source**: PMPro classes/class-pmpro-subscription.php, includes/functions.php
**Index Terms**: `db_security`, `prepared_statements`, `wpdb_prepare`

```php
// ✅ GOOD: PMPro comprehensive prepared statements
// Pattern from paid-memberships-pro/classes/class-pmpro-subscription.php
public static function get_subscriptions( array $args = [] ) {
    global $wpdb;
    
    $sql_query = "SELECT `id` FROM `$wpdb->pmpro_subscriptions`";
    $prepared = [];
    $where = [];
    
    // Filter by ID(s)
    if ( isset( $args['id'] ) ) {
        if ( ! is_array( $args['id'] ) ) {
            $where[] = 'id = %d';
            $prepared[] = $args['id'];
        } else {
            $where[] = 'id IN ( ' . implode( ', ', array_fill( 0, count( $args['id'] ), '%d' ) ) . ' )';
            $prepared = array_merge( $prepared, $args['id'] );
        }
    }
    
    // Filter by user ID(s)
    if ( isset( $args['user_id'] ) ) {
        if ( ! is_array( $args['user_id'] ) ) {
            $where[] = 'user_id = %d';
            $prepared[] = $args['user_id'];
        } else {
            $where[] = 'user_id IN ( ' . implode( ', ', array_fill( 0, count( $args['user_id'] ), '%d' ) ) . ' )';
            $prepared = array_merge( $prepared, $args['user_id'] );
        }
    }
    
    // Maybe filter the data
    if ( $where ) {
        $sql_query .= ' WHERE ' . implode( ' AND ', $where );
    }
    
    $sql_query .= ' ORDER BY ' . $orderby;
    
    if ( $limit ) {
        $sql_query .= ' LIMIT %d';
        $prepared[] = $limit;
    }
    
    // Maybe prepare the query
    if ( $prepared ) {
        $sql_query = $wpdb->prepare( $sql_query, $prepared );
    }
    
    $subscription_ids = $wpdb->get_col( $sql_query );
    
    return $subscription_ids;
}

// ✅ GOOD: PMPro membership insertion with prepared statements
// Pattern from paid-memberships-pro/includes/functions.php
$sql = $wpdb->prepare(
    "INSERT INTO {$wpdb->pmpro_memberships_users}
     (`user_id`, `membership_id`, `code_id`, `initial_payment`, `billing_amount`, 
      `cycle_number`, `cycle_period`, `billing_limit`, `trial_amount`, `trial_limit`, 
      `startdate`, `enddate`)
     VALUES ( %d, %d, %d, %s, %s, %d, %s, %d, %s, %d, %s, %s )",
    $level['user_id'],        // integer
    $level['membership_id'],  // integer
    $level['code_id'],        // integer
    $level['initial_payment'], // float (string)
    $level['billing_amount'], // float (string)
    $level['cycle_number'],   // integer
    $level['cycle_period'],   // string (enum)
    $level['billing_limit'],  // integer
    $level['trial_amount'],   // float (string)
    $level['trial_limit'],    // integer
    $level['startdate'],      // string (date)
    $level['enddate']         // string (date)
);
```

### **WP Defender ORM Security Pattern**
**Pattern Source**: WP Defender framework/db/class-mapper.php, src/class-db.php
**Index Terms**: `db_security`, `orm_security`, `query_builder`

```php
// ✅ GOOD: WP Defender ORM with prepared statements
// Pattern from wp-defender/framework/db/class-mapper.php
public function where( ...$args ) {
    global $wpdb;
    
    if ( 2 === count( $args ) ) {
        list($key, $value) = $args;
        $this->where[] = $wpdb->prepare( 
            "`$key` = " . $this->guess_var_type( $value ), 
            $value 
        );
        return $this;
    }
    
    [$key, $operator, $value] = $args;
    
    if ( ! $this->valid_operator( $operator ) ) {
        return $this; // Prevent invalid operators
    }
    
    if ( in_array( strtolower( $operator ), array( 'in', 'not in' ), true ) ) {
        $tmp = $key . " {$operator} (" . implode(
            ', ',
            array_fill( 0, count( $value ), $this->guess_var_type( $value ) )
        ) . ')';
        $sql = call_user_func_array(
            array( $wpdb, 'prepare' ),
            array_merge( array( $tmp ), $value )
        );
        $this->where[] = $sql;
    } elseif ( 'between' === strtolower( $operator ) ) {
        $this->where[] = $wpdb->prepare(
            "{$key} {$operator} {$this->guess_var_type($value[0])} AND {$this->guess_var_type($value[1])}",
            $value[0],
            $value[1]
        );
    } else {
        $this->where[] = $wpdb->prepare( 
            "`$key` $operator {$this->guess_var_type($value)}", 
            $value 
        );
    }
    
    return $this;
}

// ✅ GOOD: WP Defender operator validation
private function valid_operator( $operator ) {
    $operator = strtolower( $operator );
    $allowed = array(
        'in', 'not in', '>', '<', '=', '<=', '>=', 
        'like', 'between', 'regexp', 'not regexp',
    );
    
    return in_array( $operator, $allowed, true );
}
```

### **PMPro Search Query Security Pattern**
**Pattern Source**: PMPro classes/class-pmpro-members-list-table.php
**Index Terms**: `db_security`, `search_queries`, `esc_sql`

```php
// ✅ GOOD: PMPro search query with proper escaping
// Pattern from paid-memberships-pro/classes/class-pmpro-members-list-table.php
if ( ! empty( $s ) ) {
    if ( ! empty( $search_key ) ) {
        // Smart search with key-based filtering
        if( in_array( $search_key, array( 'login', 'nicename', 'email', 'url', 'display_name' ), true ) ) {
            $key_column = 'u.user_' . $search_key; // Safe column names
            $search_query = " AND $key_column LIKE '%" . esc_sql( $s ) . "%' ";
        } elseif ( $search_key === 'discount' || $search_key === 'discount_code' || $search_key === 'dc' ) {
            $user_ids = $wpdb->get_col( 
                "SELECT dcu.user_id FROM $wpdb->pmpro_discount_codes_uses dcu 
                 LEFT JOIN $wpdb->pmpro_discount_codes dc ON dcu.code_id = dc.id 
                 WHERE dc.code = '" . esc_sql( $s ) . "'" 
            );
            if ( empty( $user_ids ) ) {
                $user_ids = array(0); // Avoid warning, ensure 0 results
            }
            $search_query = " AND u.ID IN(" . implode( ",", $user_ids ) . ") ";
        } elseif ( $search_key === 'subscription_transaction_id' ) {
            $search_query = " AND s.subscription_transaction_id LIKE '%" . esc_sql( $s ) . "%' 
                              AND mu.membership_id = s.membership_level_id 
                              AND mu.status = 'active' ";
        } else {
            $user_ids = $wpdb->get_col( 
                "SELECT user_id FROM $wpdb->usermeta 
                 WHERE meta_key = '" . esc_sql( $search_key ) . "' 
                 AND meta_value LIKE '%" . esc_sql( $s ) . "%'" 
            );
            if ( empty( $user_ids ) ) {
                $user_ids = array(0);
            }
            $search_query = " AND u.ID IN(" . implode( ",", $user_ids ) . ") ";
        }
    } else {
        // Default search with multiple fields
        $search_query = " AND ( u.user_login LIKE '%" . esc_sql($s) . "%' 
                              OR u.user_email LIKE '%" . esc_sql($s) . "%' 
                              OR u.display_name LIKE '%" . esc_sql($s) . "%' ) ";
    }
}
```

### **WP Defender Database Table Creation Pattern**
**Pattern Source**: WP Defender src/traits/defender-bootstrap.php
**Index Terms**: `db_security`, `table_creation`, `charset_collate`

```php
// ✅ GOOD: WP Defender secure table creation
// Pattern from wp-defender/src/traits/defender-bootstrap.php
protected function create_database_tables(): void {
    global $wpdb;
    
    $charset_collate = $wpdb->get_charset_collate();
    $wpdb->hide_errors();
    
    // Email log table
    $sql = "CREATE TABLE IF NOT EXISTS {$wpdb->base_prefix}defender_email_log (
        `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
        `timestamp` int NOT NULL,
        `source` varchar(255) NOT NULL,
        `to` varchar(255) NOT NULL,
        PRIMARY KEY  (`id`),
        KEY `source` (`source`)
    ) $charset_collate;";
    $wpdb->query( $sql );
    
    // Audit log table with proper indexing
    $sql = "CREATE TABLE IF NOT EXISTS {$wpdb->base_prefix}defender_audit_log (
        `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
        `timestamp` int NOT NULL,
        `event_type` varchar(255) NOT NULL,
        `action_type` varchar(255) NOT NULL,
        `site_url` varchar(255) NOT NULL,
        `user_id` int NOT NULL,
        `context` varchar(255) NOT NULL,
        `ip` varchar(45) NOT NULL,
        `msg` varchar(255) NOT NULL,
        `blog_id` int NOT NULL,
        `synced` int NOT NULL,
        `ttl` int NOT NULL,
        PRIMARY KEY  (`id`),
        KEY `event_type` (`event_type`),
        KEY `action_type` (`action_type`),
        KEY `user_id` (`user_id`),
        KEY `context` (`context`),
        KEY `ip` (`ip`)
    ) $charset_collate;";
    $wpdb->query( $sql );
}

// ✅ GOOD: WP Defender foreign key constraints (InnoDB)
private function is_quarantine_dependent_tables_innodb(): bool {
    global $wpdb;
    
    $tables = array( $wpdb->users, $wpdb->base_prefix . $this->scan_item_table );
    $total_table = count( $tables );
    
    return $wpdb->get_var(
        $wpdb->prepare(
            "SELECT COUNT(`ENGINE`) = %d FROM information_schema.TABLES 
             WHERE TABLE_SCHEMA = %s AND `ENGINE` = %s 
             AND TABLE_NAME IN ( '{$wpdb->users}', '{$wpdb->base_prefix}defender_scan_item' );",
            $total_table,
            $wpdb->dbname,
            'innodb',
        )
    ) === '1';
}
```

### **PMPro Bulk Insert Security Pattern**
**Pattern Source**: PMPro classes/class-pmpro-subscription.php
**Index Terms**: `db_security`, `bulk_insert`, `data_validation`

```php
// ✅ GOOD: PMPro secure bulk insert with validation
// Pattern from paid-memberships-pro/classes/class-pmpro-subscription.php
public function save() {
    global $wpdb;
    
    // Use PMPro's insert_or_replace function with proper data types
    pmpro_insert_or_replace( 
        $wpdb->pmpro_subscriptions,
        array(
            'id'                          => $this->id,
            'user_id'                     => $this->user_id,
            'membership_level_id'         => $this->membership_level_id,
            'gateway'                     => $this->gateway,
            'gateway_environment'         => $this->gateway_environment,
            'subscription_transaction_id' => $this->subscription_transaction_id,
            'status'                      => $this->status,
            'startdate'                   => $this->startdate,
            'enddate'                     => $this->enddate,
            'next_payment_date'           => $this->next_payment_date,
            'billing_amount'              => $this->billing_amount,
            'cycle_number'                => $this->cycle_number,
            'cycle_period'                => $this->cycle_period,
            'billing_limit'               => $this->billing_limit,
            'trial_amount'                => $this->trial_amount,
            'trial_limit'                 => $this->trial_limit,
        ),
        array(
            '%d', // id
            '%d', // user_id
            '%d', // membership_level_id
            '%s', // gateway
            '%s', // gateway_environment
            '%s', // subscription_transaction_id
            '%s', // status
            '%s', // startdate
            '%s', // enddate
            '%s', // next_payment_date
            '%f', // billing_amount
            '%d', // cycle_number
            '%s', // cycle_period
            '%d', // billing_limit
            '%f', // trial_amount
            '%d', // trial_limit
        ),
        'id'
    );
    
    if ( $wpdb->insert_id ) {
        $this->id = $wpdb->insert_id;
    }
    
    return !empty( $this->id );
}
```

### **WP Defender Model Save Pattern**
**Pattern Source**: WP Defender framework/db/class-mapper.php
**Index Terms**: `db_security`, `model_save`, `data_type_validation`

```php
// ✅ GOOD: WP Defender model save with data type validation
// Pattern from wp-defender/framework/db/class-mapper.php
public function save( Model &$model ) {
    global $wpdb;
    
    $data = $model->export();
    $data_type = array();
    $exported_type = $model->export_type();
    
    unset( $data['table'] );
    unset( $data['safe'] );
    
    foreach ( $data as $key => &$val ) {
        if ( is_array( $val ) ) {
            $val = wp_json_encode( $val );
        } elseif ( is_bool( $val ) ) {
            $val = $val ? 1 : 0;
        }
        
        $data_type[] = $exported_type[ $key ] ?? '%s';
    }
    
    $table = self::table( $model );
    
    if ( $model->id ) {
        $ret = $wpdb->update(
            $table,
            $data,
            array( 'id' => $model->id ),
            $data_type,
            array( '%d' )
        );
    } else {
        $ret = $wpdb->insert( $table, $data, $data_type );
        $model->id = $wpdb->insert_id;
    }
    
    if ( false === $ret ) {
        return false;
    }
    
    return $wpdb->insert_id;
}
```

### **PMPro Complex Query Security Pattern**
**Pattern Source**: PMPro includes/content.php
**Index Terms**: `db_security`, `complex_queries`, `array_map_esc_sql`

```php
// ✅ GOOD: PMPro complex query with array escaping
// Pattern from paid-memberships-pro/includes/content.php
// Query A: All posts hidden by level
$sql_A = "SELECT DISTINCT(mp.page_id)
          FROM {$wpdb->pmpro_memberships_pages} mp
          LEFT JOIN {$wpdb->posts} p ON mp.page_id = p.ID
          WHERE p.post_type IN('" . implode( "', '", array_map('esc_sql', $pmpro_search_filter_post_types)) . "')";
$posts_hidden_by_level = $wpdb->get_col( $sql_A );

// Query C: All posts the current user has access to by level
if ( ! empty( $level_ids ) ) {
    $sql_C = "SELECT DISTINCT(mp.page_id)
              FROM {$wpdb->pmpro_memberships_pages} mp
              LEFT JOIN {$wpdb->posts} p ON mp.page_id = p.ID
              WHERE mp.membership_id IN (" . implode(',', array_map('esc_sql', $level_ids)) . ")
              AND p.post_type IN('" . implode( "', '", array_map('esc_sql', $pmpro_search_filter_post_types)) . "')";
    $accessible_posts_by_level = $wpdb->get_col( $sql_C );
}

// Query D: All posts the current user has access to by category
if ( ! empty ($level_ids ) ) {
    $sql_D = "SELECT DISTINCT(tr.object_id)
              FROM {$wpdb->term_relationships} tr
              LEFT JOIN {$wpdb->posts} p ON tr.object_id = p.ID
              WHERE tr.term_taxonomy_id IN(
                  SELECT category_id
                  FROM {$wpdb->pmpro_memberships_categories}
                  WHERE membership_id IN (" . implode(',', array_map('esc_sql', $level_ids)) . ")
              ) AND p.post_type IN('" . implode( "', '", array_map('esc_sql', $pmpro_search_filter_post_types)) . "')";
    $accessible_posts_by_category = $wpdb->get_col( $sql_D );
}
```

### **WP Defender Bulk Operations Pattern**
**Pattern Source**: WP Defender src/model/class-antibot-global-firewall.php
**Index Terms**: `db_security`, `bulk_operations`, `batch_processing`

```php
// ✅ GOOD: WP Defender secure bulk insert with batching
// Pattern from wp-defender/src/model/class-antibot-global-firewall.php
public function bulk_insert( $ips ): void {
    $batch_size = 1000;
    $values = array();
    $placeholders = array();
    $counter = 0;
    
    foreach ( $ips as $ip ) {
        $values[] = $ip;
        $placeholders[] = '(%s)';
        ++$counter;
        
        if ( $counter === $batch_size ) {
            $this->execute_insert( $placeholders, $values );
            
            $values = array();
            $placeholders = array();
            $counter = 0;
        }
    }
    
    // Insert remaining records if any
    if ( $counter > 0 ) {
        $this->execute_insert( $placeholders, $values );
    }
}

private function execute_insert( array $placeholders, array $values ): void {
    global $wpdb;
    
    $table_name = $wpdb->prefix . $this->table;
    
    $wpdb->query(
        $wpdb->prepare(
            "INSERT INTO $table_name (ip) VALUES " . implode( ', ', $placeholders ),
            $values
        )
    );
}

// ✅ GOOD: WP Defender secure bulk update
public function unlock_ips( array $ips ) {
    if ( empty( $ips ) ) {
        return false;
    }
    
    global $wpdb;
    
    $table_name = $wpdb->prefix . $this->table;
    $current_time = time();
    $placeholders = implode( ', ', array_fill( 0, count( $ips ), '%s' ) );
    
    return $wpdb->query(
        $wpdb->prepare(
            "UPDATE $table_name SET unlocked = 1, unlocked_at = %d WHERE ip IN ($placeholders)",
            array_merge( array( $current_time ), $ips )
        )
    );
}
```

### **Common Database Security Patterns Reference**
**Pattern Source**: PMPro and WP Defender comprehensive usage
**Index Terms**: `db_security`, `security_patterns`, `best_practices`

```php
// ✅ GOOD: Comprehensive database security patterns reference
// Based on PMPro and WP Defender patterns

// Always use prepared statements
$result = $wpdb->get_results( $wpdb->prepare(
    "SELECT * FROM {$wpdb->prefix}table WHERE id = %d AND status = %s",
    $id, $status
) );

// Escape SQL for dynamic parts
$post_types = array_map( 'esc_sql', $post_types );
$sql = "SELECT * FROM {$wpdb->posts} WHERE post_type IN ('" . implode("', '", $post_types) . "')";

// Use correct data types in prepare
$wpdb->prepare(
    "INSERT INTO table (int_field, float_field, string_field, date_field) VALUES (%d, %f, %s, %s)",
    $int_value, $float_value, $string_value, $date_value
);

// Validate operators in dynamic queries
$allowed_operators = array( '=', '!=', '>', '<', '>=', '<=', 'LIKE', 'IN', 'NOT IN' );
if ( ! in_array( $operator, $allowed_operators, true ) ) {
    return new WP_Error( 'invalid_operator', 'Invalid query operator' );
}

// Use array_fill for IN clauses
$placeholders = implode( ', ', array_fill( 0, count( $ids ), '%d' ) );
$sql = $wpdb->prepare( "SELECT * FROM table WHERE id IN ($placeholders)", $ids );

// Integer validation for IDs
$user_id = intval( $user_id );
$post_id = (int) $post_id;

// Charset collation for table creation
$charset_collate = $wpdb->get_charset_collate();
$sql = "CREATE TABLE {$table_name} (...) $charset_collate;";

// Proper indexing for performance and security
$sql = "CREATE TABLE {$table_name} (
    id int(11) unsigned NOT NULL AUTO_INCREMENT,
    user_id int(11) NOT NULL,
    email varchar(255) NOT NULL,
    status varchar(16) NOT NULL,
    PRIMARY KEY (id),
    KEY user_id (user_id),
    KEY status (status),
    KEY email (email)
) $charset_collate;";

// ❌ BAD: Never do this
$sql = "SELECT * FROM table WHERE id = " . $_GET['id'];           // Direct injection
$sql = "SELECT * FROM table WHERE name = '$name'";                // Unescaped string
$wpdb->query( "DELETE FROM table WHERE user_input = '$input'" );  // Unescaped deletion
```

---

## 🔐 **Rate Limiting & Spam Protection** (`rate_limiting`)

### **PMPro Comprehensive Spam Protection System**
**Pattern Source**: PMPro includes/spam.php, adminpages/securitysettings.php
**Index Terms**: `rate_limiting`, `spam_protection`, `transient_tracking`

```php
// ✅ GOOD: PMPro comprehensive spam protection with transient tracking
// Pattern from paid-memberships-pro/includes/spam.php
function pmpro_track_spam_activity( $ip = null ) {
    // Make sure that we only track spam a maximum of once per page load.
    static $already_tracked = false;
    if ( $already_tracked ) {
        return false;
    }
    $already_tracked = true;

    // Get the IP address if it's not provided.
    if ( empty( $ip ) ) {
        $ip = pmpro_get_ip();
    }

    // If we can't determine the IP, let's bail.
    if ( empty( $ip ) ) {
        return false;
    }

    $activity = pmpro_get_spam_activity( $ip );
    $now = current_time( 'timestamp', true ); // UTC
    array_unshift( $activity, $now );

    // If we have more than the limit, don't bother storing them.
    if ( count( $activity ) > PMPRO_SPAM_ACTION_NUM_LIMIT ) {
        rsort( $activity );
        $activity = array_slice( $activity, 0, PMPRO_SPAM_ACTION_NUM_LIMIT );
    }

    // Save to transient.
    $ip = preg_replace( '/[^0-9a-fA-F:., ]/', '', $ip );
    $transient_key = 'pmpro_spam_activity_' . $ip;
    set_transient( $transient_key, $activity, (int) PMPRO_SPAM_ACTION_TIME_LIMIT );

    return true;
}

// ✅ GOOD: PMPro spam detection with configurable limits
function pmpro_is_spammer() {
    $is_spammer = false;
    $activity = pmpro_get_spam_activity();
    if ( false !== $activity && count( $activity ) >= PMPRO_SPAM_ACTION_NUM_LIMIT ) {
        $is_spammer = true;
    }
    return apply_filters( 'pmpro_is_spammer', $is_spammer, $activity );
}

// ✅ GOOD: PMPro checkout blocking for spammers
function pmpro_disable_checkout_for_spammers( $required_fields ) {
    // Bail if Spam Protection is disabled.
    $spamprotection = get_option("pmpro_spamprotection");    
    if ( empty( $spamprotection ) ) {
        return $required_fields;
    }
    
    if ( pmpro_was_checkout_form_submitted() && pmpro_is_spammer() ) {
        pmpro_setMessage( __( 'Suspicious activity detected. Try again in a few minutes.', 'paid-memberships-pro' ), 'pmpro_error' );
    }
    return $required_fields;
}
```

### **WP Defender Advanced Rate Limiting System**
**Pattern Source**: WP Defender component/class-login-lockout.php, model/setting/class-login-lockout.php
**Index Terms**: `rate_limiting`, `login_lockout`, `attempt_tracking`

```php
// ✅ GOOD: WP Defender login attempt tracking with time windows
// Pattern from wp-defender/src/component/class-login-lockout.php
public function process_fail_attempt( $username, $error ) {
    if ( empty( $username ) ) {
        return;
    }

    foreach ( $this->ip as $ip ) {
        if ( $this->service->is_ip_whitelisted( $ip ) ) {
            continue;
        }
        
        // Record this attempt
        $model = Lockout_Ip::get( $ip );
        $model = $this->record_fail_attempt( $ip, $model );
        
        // Log the event
        $this->log_event( $ip, $username, self::SCENARIO_LOGIN_FAIL );
        
        // Check if IP should be locked based on attempt window
        $ls = $this->model;
        $window = strtotime( '-' . $ls->timeframe . 'seconds' );
        
        $model = $this->check_meta_data( $model );
        // Get the latest attempts, limited by attempt count
        $checks = array_slice( $model->meta['login'], $ls->attempt * -1 );
        
        if ( count( $checks ) < $ls->attempt ) {
            continue;
        }
        
        // Check if attempts are within the time window
        $check = min( $checks );
        if ( $check >= $window ) {
            if ( 'permanent' === $ls->lockout_type ) {
                $model->attempt       = 0;
                $model->meta['login'] = array();
                $model->save();
                do_action( 'wd_blacklist_this_ip', $ip );
            } else {
                // Temporary lockout
                $model->status    = Lockout_Ip::STATUS_BLOCKED;
                $model->lock_time = time();
                $this->create_blocked_lockout(
                    $model,
                    $ls->lockout_message,
                    strtotime( '+' . $ls->duration . ' ' . $ls->duration_unit )
                );
            }
            
            $this->log_event( $ip, $username, self::SCENARIO_LOGIN_LOCKOUT );
            do_action( 'wd_login_lockout', $model, self::SCENARIO_LOGIN_LOCKOUT );
        }
    }
}

// ✅ GOOD: WP Defender attempt counter with transient
private function check_attempt_counter_by( $blocked_ip ): bool {
    $blocked_ip    = $this->check_ip_by_remote_addr( $blocked_ip );
    $request_count = get_transient( $blocked_ip );
    $disabled      = false;
    
    if ( false === $request_count ) {
        set_transient( $blocked_ip, 1, Unlock_Me::EXPIRED_COUNTER_TIME );
    } elseif ( (int) $request_count >= Unlock_Me::get_attempt_limit() ) {
        $disabled = true;
    } else {
        ++$request_count;
        set_transient( $blocked_ip, $request_count, Unlock_Me::EXPIRED_COUNTER_TIME );
    }
    
    return $disabled;
}

// ✅ GOOD: WP Defender 2FA attempt limiting
public function get_attempt_limit(): int {
    return (int) apply_filters( 'wd_2fa_attempt_limit', self::ATTEMPT_LIMIT );
}

// ✅ GOOD: WP Defender 2FA lockout with time limits
if ( apply_filters( 'wd_2fa_enable_attempts', true ) && $login_settings->enabled ) {
    $line = get_user_meta( $user_id, 'wd_2fa_attempt_' . $slug, true );
    
    if ( empty( $line ) ) {
        $count      = $this->get_attempt_limit();
        $start_time = time();
    } else {
        [ $count, $start_time ] = explode( '::', $line );
    }
    
    $end_time   = time();
    $time_limit = $this->get_time_limit();
    
    // Reset attempts if time limit exceeded
    if ( $end_time - $start_time >= $time_limit ) {
        delete_user_meta( $user_id, 'wd_2fa_attempt_' . $slug );
        $count      = $this->get_attempt_limit();
        $start_time = $end_time;
    }
    
    $count = (int) $count - 1;
    if ( 1 > $count ) {
        $message = sprintf(
            esc_html__( 'Lockout occurred: Too many failed 2fa attempts for %s method.', 'wpdef' ),
            $slug
        );
        do_action( 'wd_2fa_lockout', $user_id, $message, $time_limit );
        delete_user_meta( $user_id, 'wd_2fa_attempt_' . $slug );
        wp_safe_redirect( home_url() );
        exit;
    }
}
```

### **PMPro reCAPTCHA Integration Pattern**
**Pattern Source**: PMPro includes/recaptcha.php, includes/cloudflare-turnstile.php
**Index Terms**: `rate_limiting`, `recaptcha_integration`, `captcha_validation`

```php
// ✅ GOOD: PMPro reCAPTCHA validation with session tracking
// Pattern from paid-memberships-pro/includes/recaptcha.php
function pmpro_recaptcha_is_validated() {
    // Check if the user has already been validated.
    $recaptcha_validated = pmpro_get_session_var( 'pmpro_recaptcha_validated' );
    if ( ! empty( $recaptcha_validated ) ) {
        return true;
    }

    // Get the ReCAPTCHA private key.
    $recaptcha_privatekey = get_option( 'pmpro_recaptcha_privatekey' );

    // Verify the reCAPTCHA response
    if ( isset( $_POST["g-recaptcha-response"] ) ) {
        require_once(PMPRO_DIR . '/includes/lib/recaptchalib.php' );
        $reCaptcha = new pmpro_ReCaptcha( $recaptcha_privatekey );
        $resp      = $reCaptcha->verifyResponse( pmpro_get_ip(), $_POST["g-recaptcha-response"] );
        
        $recaptcha_valid  = $resp->success;
        $recaptcha_errors = $resp->errorCodes;
    } else {
        return __( 'ReCAPTCHA not submitted.', 'paid-memberships-pro' );
    }

    if ( $recaptcha_valid ) {
        pmpro_set_session_var( 'pmpro_recaptcha_validated', true );
        return true;
    } else {
        return $recaptcha_errors;
    }
}

// ✅ GOOD: PMPro CloudFlare Turnstile integration
function pmpro_cloudflare_turnstile_validation( $okay ) {
    if ( ! $okay ) {
        return $okay;
    }
    
    if ( empty( get_option( 'pmpro_cloudflare_turnstile' ) ) ) {
        return $okay;
    }
    
    // Don't show it more than once on a screen
    if ( pmpro_get_session_var( 'pmpro_cloudflare_turnstile_validated' ) ) {
        return $okay;
    }
    
    if ( empty( $_POST['cf-turnstile-response'] ) ) {
        pmpro_setMessage( __( 'Please complete the security check.', 'paid-memberships-pro' ), 'pmpro_error' );
        return false;
    }
    
    // Verify the turnstile check
    $headers = array(
        'body' => array(
            'secret'   => get_option( 'pmpro_cloudflare_turnstile_secret_key', '' ),
            'response' => pmpro_getParam( 'cf-turnstile-response' ),
        ),
    );
    $verify   = wp_remote_post( 'https://challenges.cloudflare.com/turnstile/v0/siteverify', $headers );
    $verify   = wp_remote_retrieve_body( $verify );
    $response = json_decode( $verify );
    
    if ( empty( $response->success ) ) {
        $error_messages    = pmpro_cloudflare_turnstile_get_error_message();
        $error_code        = $response->{'error-codes'}[0];
        $displayed_message = isset( $error_messages[ $error_code ] ) ? $error_messages[ $error_code ] : esc_html__( 'An error occurred while validating the security check.', 'paid-memberships-pro' );
        
        pmpro_setMessage( $displayed_message, 'pmpro_error' );
        $okay = false;
    }
    
    pmpro_set_session_var( 'pmpro_cloudflare_turnstile_validated', true );
    return $okay;
}
```

### **WP Defender IP Blacklist Management**
**Pattern Source**: WP Defender model/setting/class-blacklist-lockout.php, component/class-blacklist-lockout.php
**Index Terms**: `rate_limiting`, `ip_blacklist`, `country_blocking`

```php
// ✅ GOOD: WP Defender IP blacklist with country support
// Pattern from wp-defender/src/model/setting/class-blacklist-lockout.php
class Blacklist_Lockout extends Setting {
    /**
     * Store a list of IPs blocked from the site, the priority of this list is lower than whitelist.
     */
    public $ip_blacklist = '';
    
    /**
     * Top priority, if an IP in this list, mean we never check any on them.
     */
    public $ip_whitelist = '';
    
    /**
     * The message to show on frontend when a blocklisted IP access the site.
     */
    public $ip_lockout_message = '';
    
    /**
     * Block IPs from specific countries.
     */
    public $country_blacklist = array();
    
    /**
     * Allow only specific countries (block all others).
     */
    public $country_whitelist = array();
    
    /**
     * MaxMind license key for geolocation.
     */
    public $maxmind_license_key = '';
}

// ✅ GOOD: WP Defender session protection with IP locking
// Pattern from wp-defender/src/component/class-session-protection.php
public function handle_session_lock() {
    $token        = wp_get_session_token();
    $user_id      = get_current_user_id();
    $manager      = WP_User_Meta_Session_Tokens::get_instance( $user_id );
    $session_data = $manager->get( $token );
    
    if ( ! is_array( $session_data ) ) {
        $this->log( 'Session data is missing or malformed. Destroying all sessions.', self::LOG_FILE_NAME );
        $this->logout( $user_id );
        return;
    }
    
    $user_ips = $this->get_user_ip();
    
    // Work with the Session Lock options
    if ( $this->settings->is_property_locked( self::LOCK_IP_ADDRESS ) && isset( $session_data['defender_ip'] ) ) {
        $ips = implode( '|', $user_ips );
        $this->is_ip_allowed( $ips, $session_data['defender_ip'], $user_id );
    }
    
    if ( $this->settings->is_property_locked( self::LOCK_HOSTNAME ) && isset( $session_data['defender_hostname'] ) ) {
        $hostname = defender_get_domain();
        $this->is_hostname_allowed( $hostname, $session_data['defender_hostname'], $user_id );
    }
}
```

### **❌ AVOID: Common Rate Limiting Mistakes**

```php
// ❌ BAD: No rate limiting
function process_form_submission() {
    // Direct processing without any rate limiting
    $result = save_user_data($_POST);
    return $result;
}

// ❌ BAD: Client-side only rate limiting
function check_rate_limit() {
    // JavaScript-only rate limiting can be bypassed
    if (lastSubmission + 5000 > Date.now()) {
        return false;
    }
    return true;
}

// ❌ BAD: No IP validation
function track_attempts() {
    $attempts = get_option('failed_attempts', 0);
    $attempts++;
    update_option('failed_attempts', $attempts);
    // This tracks globally, not per IP
}

// ❌ BAD: No time window reset
function check_attempts() {
    $attempts = get_user_meta($user_id, 'attempts', true);
    if ($attempts > 5) {
        // No time-based reset - permanent lockout
        return false;
    }
    return true;
}
```

## 🔒 **File Security & Access Control** (`file_access`)

### **PMPro Secure File Serving System**
**Pattern Source**: PMPro services/getfile.php, includes/content.php
**Index Terms**: `file_access`, `secure_file_serving`, `membership_protection`

```php
// ✅ GOOD: PMPro secure file serving with membership protection
// Pattern from paid-memberships-pro/services/getfile.php
function pmpro_secure_file_access() {
    // Prevent direct access
    if (!defined('ABSPATH')) {
        die("Direct access not allowed");
    }
    
    // Check if getfile script is enabled
    if (!defined('PMPRO_GETFILE_ENABLED') || !PMPRO_GETFILE_ENABLED) {
        die("The getfile script is not enabled.");
    }
    
    // Prevent directory traversal attacks
    $uri = sanitize_text_field($_SERVER['REQUEST_URI']);
    $uri = urldecode($uri);
    
    // Remove ../-like strings to prevent traversal attacks
    $uri = preg_replace("/[\.\/\\\\]{2,}/", "", $uri);
    
    // Get file path and validate
    $filename = ABSPATH . $uri;
    
    // Check membership access for file
    if (!is_admin()) {
        $upload_dir = wp_upload_dir();
        $filename_small = substr($filename, strlen($upload_dir['basedir']) + 1);
        
        // Look up file in database
        global $wpdb;
        $sqlQuery = "SELECT post_parent FROM $wpdb->posts 
                     WHERE ID = (SELECT post_id FROM $wpdb->postmeta 
                                WHERE meta_key = '_wp_attached_file' 
                                AND meta_value = %s LIMIT 1) LIMIT 1";
        $file_post_parent = $wpdb->get_var($wpdb->prepare($sqlQuery, $filename_small));
        
        // Check membership access
        if ($file_post_parent && !pmpro_has_membership_access($file_post_parent)) {
            do_action("pmpro_getfile_before_error", $filename, $file_post_parent);
            header('HTTP/1.1 503 Service Unavailable', true, 503);
            exit;
        }
    }
    
    // Validate file exists
    if (!file_exists($filename)) {
        status_header(404);
        nocache_headers();
        die("File not found.");
    }
    
    // Block dangerous file types
    $basename = basename($filename);
    $parts = explode('.', $basename);
    $ext = strtolower($parts[count($parts)-1]);
    
    $blocklist = array("inc", "php", "php3", "php4", "php5", "phps", "phtml");
    $blocklist = apply_filters("pmpro_getfile_extension_blocklist", $blocklist);
    
    if (in_array($ext, $blocklist)) {
        $uri = add_query_arg("noloop", 1, $uri);
        $uri = (is_ssl() ? "https://" : "http://") . $_SERVER['HTTP_HOST'] . "/" . $uri;
        wp_safe_redirect($uri);
        exit;
    }
    
    // Serve file securely
    $mimetype = wp_check_filetype($filename);
    header("Content-type: " . $mimetype['type']);
    readfile($filename);
    exit;
}
```

### **WP Defender Directory Protection System**
**Pattern Source**: WP Defender src/helper/class-file.php, src/component/class-quarantine.php
**Index Terms**: `file_access`, `directory_protection`, `htaccess_security`

```php
// ✅ GOOD: WP Defender directory access control
// Pattern from wp-defender/src/helper/class-file.php
class WP_Defender_File_Access {
    
    /**
     * Deny access for the provided directory
     */
    public function maybe_dir_access_deny(string $directory) {
        global $wp_filesystem;
        
        if (empty($wp_filesystem)) {
            require_once ABSPATH . '/wp-admin/includes/file.php';
            WP_Filesystem();
        }
        
        $files = array(
            array(
                'base'    => $directory,
                'file'    => '.htaccess',
                'content' => 'deny from all',
            ),
            array(
                'base'    => $directory,
                'file'    => 'index.html',
                'content' => '',
            ),
        );
        
        foreach ($files as $file) {
            $file_path = trailingslashit($file['base']) . $file['file'];
            if (!is_null($file_path) && !file_exists($file_path)) {
                $wp_filesystem->put_contents($file_path, $file['content']);
            }
        }
    }
    
    /**
     * Get secure quarantine directory with proper permissions
     */
    private function get_quarantine_directory(): string {
        global $wp_filesystem;
        
        if (empty($wp_filesystem)) {
            require_once ABSPATH . '/wp-admin/includes/file.php';
            WP_Filesystem();
        }
        
        $quarantine_dir = WP_CONTENT_DIR . DIRECTORY_SEPARATOR . '.defender-security-quarantine';
        
        // Create directory with secure permissions
        if (!is_dir($quarantine_dir)) {
            $wp_filesystem->mkdir($quarantine_dir, 0755);
        }
        
        // Deny access to quarantine directory
        $this->maybe_dir_access_deny($quarantine_dir);
        
        return $quarantine_dir;
    }
    
    /**
     * Create secure temporary directory
     */
    protected function get_tmp_path(bool $main_site_path = false): string {
        global $wp_filesystem;
        
        if (empty($wp_filesystem)) {
            require_once ABSPATH . '/wp-admin/includes/file.php';
            WP_Filesystem();
        }
        
        $upload_dir = wp_upload_dir()['basedir'];
        $tmp_dir = $upload_dir . DIRECTORY_SEPARATOR . 'wp-defender';
        
        // Create directory if it doesn't exist
        if (!is_dir($tmp_dir)) {
            wp_mkdir_p($tmp_dir);
        }
        
        // Add index.php to prevent directory listing
        if (!is_file($tmp_dir . DIRECTORY_SEPARATOR . 'index.php')) {
            $wp_filesystem->put_contents($tmp_dir . DIRECTORY_SEPARATOR . 'index.php', '');
        }
        
        // Deny directory access
        $this->maybe_dir_access_deny($tmp_dir);
        
        return $tmp_dir;
    }
}
```

### **WP Defender Apache Security Rules**
**Pattern Source**: WP Defender src/component/security-tweaks/servers/class-apache.php
**Index Terms**: `file_access`, `apache_security`, `htaccess_rules`

```php
// ✅ GOOD: WP Defender Apache security rules for file protection
// Pattern from wp-defender/src/component/security-tweaks/servers/class-apache.php
class WP_Defender_Apache_Security {
    
    /**
     * Protect content directory from PHP execution
     */
    public function protect_content_directory() {
        global $wp_filesystem;
        
        if (empty($wp_filesystem)) {
            require_once ABSPATH . '/wp-admin/includes/file.php';
            WP_Filesystem();
        }
        
        $ht_access_path = WP_CONTENT_DIR . '/.htaccess';
        
        // Create htaccess file if it doesn't exist
        if (!is_file($ht_access_path) && 
            false === (bool) file_put_contents($ht_access_path, '', LOCK_EX)) {
            return new WP_Error(
                'defender_file_not_writable',
                sprintf(__('The file %s is not writable', 'wpdef'), $ht_access_path)
            );
        }
        
        // Check if file is writable
        if (!$wp_filesystem->is_writable($ht_access_path)) {
            return new WP_Error(
                'defender_file_not_writable',
                sprintf(__('The file %s is not writable', 'wpdef'), $ht_access_path)
            );
        }
        
        $exists_rules = $this->cleanup_old_rules($wp_filesystem->get_contents($ht_access_path));
        
        $rule = array(
            '## WP Defender - Protect PHP Executed ##',
            '<Files *.php>',
            $this->generate_htaccess_rule(false),
            '</Files>',
            '## WP Defender - End ##',
        );
        
        file_put_contents($ht_access_path, $exists_rules . implode(PHP_EOL, $rule), LOCK_EX);
    }
    
    /**
     * Protect includes directory with exceptions
     */
    public function protect_includes_directory() {
        global $wp_filesystem;
        
        if (empty($wp_filesystem)) {
            require_once ABSPATH . '/wp-admin/includes/file.php';
            WP_Filesystem();
        }
        
        $ht_access_path = ABSPATH . WPINC . '/.htaccess';
        
        // Create htaccess file if needed
        if (!is_file($ht_access_path) && 
            false === (bool) file_put_contents($ht_access_path, '', LOCK_EX)) {
            return new WP_Error(
                'defender_file_not_writable',
                sprintf(__('The file %s is not writable', 'wpdef'), $ht_access_path)
            );
        }
        
        if (!$wp_filesystem->is_writable($ht_access_path)) {
            return new WP_Error(
                'defender_file_not_writable',
                sprintf(__('The file %s is not writable', 'wpdef'), $ht_access_path)
            );
        }
        
        $exists_rules = $this->cleanup_old_rules($wp_filesystem->get_contents($ht_access_path));
        
        $rule = array(
            '## WP Defender - Protect PHP Executed ##',
            '<Files *.php>',
            $this->generate_htaccess_rule(false),
            '</Files>',
            // Allow specific WordPress core files
            '<Files wp-tinymce.php>',
            $this->generate_htaccess_rule(true),
            '</Files>',
            '<Files ms-files.php>',
            $this->generate_htaccess_rule(true),
            '</Files>',
            '## WP Defender - End ##',
        );
        
        file_put_contents($ht_access_path, $exists_rules . implode(PHP_EOL, $rule), LOCK_EX);
    }
    
    /**
     * Generate Apache rules based on server version
     */
    protected function generate_htaccess_rule($allow = true) {
        $apache_version = $this->get_apache_version();
        
        if (version_compare($apache_version, 2.4, '>=')) {
            return $allow ? 'Require all granted' : 'Require all denied';
        } else {
            return $allow ? 'Allow from all' : 'Order allow,deny' . PHP_EOL . 'Deny from all';
        }
    }
    
    /**
     * Get information disclosure protection rules
     */
    public function get_information_disclosure_rules() {
        return array(
            '## WP Defender - Protect Information Disclosure ##',
            '# Turn off server signature',
            'ServerSignature Off',
            '',
            '# Deny access to htaccess and other sensitive files',
            '<Files ~ "^.*\.([Hh][Tt][Aa])">',
            'Order allow,deny',
            'Deny from all',
            'Satisfy all',
            '</Files>',
            '',
            '# Deny access to wp-config.php',
            '<Files wp-config.php>',
            'Order allow,deny',
            'Deny from all',
            '</Files>',
            '',
            '# Deny access to sensitive file types',
            '<FilesMatch "\.(md|exe|sh|bak|inc|pot|po|mo|log|sql)$">',
            'Order allow,deny',
            'Deny from all',
            '</FilesMatch>',
            '## WP Defender - End ##',
        );
    }
}
```

### **WP Defender Nginx Security Rules**
**Pattern Source**: WP Defender src/component/security-tweaks/servers/class-nginx.php
**Index Terms**: `file_access`, `nginx_security`, `server_rules`

```php
// ✅ GOOD: WP Defender Nginx security rules for file protection
// Pattern from wp-defender/src/component/security-tweaks/servers/class-nginx.php
class WP_Defender_Nginx_Security {
    
    /**
     * Generate Nginx rules for information disclosure protection
     */
    public function get_information_disclosure_rules() {
        $doc_root = $_SERVER['DOCUMENT_ROOT'] ?? ABSPATH;
        
        if (defender_is_windows()) {
            $wp_content = str_replace(ABSPATH, '', WP_CONTENT_DIR);
        } else {
            $wp_content = str_replace($doc_root, '', WP_CONTENT_DIR);
        }
        
        $rules = '';
        $rules .= '## WP Defender - Prevent information disclosure ##' . PHP_EOL;
        $rules .= '# Turn off directory indexing' . PHP_EOL;
        $rules .= 'autoindex off;' . PHP_EOL;
        $rules .= PHP_EOL;
        
        // Deny access to hidden files
        $rules .= '# Deny access to htaccess and other hidden files' . PHP_EOL;
        $rules .= 'location ~ /\. {' . PHP_EOL;
        $rules .= '  deny  all;' . PHP_EOL;
        $rules .= '}' . PHP_EOL;
        $rules .= PHP_EOL;
        
        // Deny access to wp-config.php
        $rules .= '# Deny access to wp-config.php file' . PHP_EOL;
        $rules .= 'location = /wp-config.php {' . PHP_EOL;
        $rules .= '  deny all;' . PHP_EOL;
        $rules .= '}' . PHP_EOL;
        $rules .= PHP_EOL;
        
        // Deny access to sensitive files in wp-content
        $rules .= '# Deny access to revealing or potentially dangerous files in the /wp-content/ directory' . PHP_EOL;
        $rules .= "location ~* ^$wp_content/.*\.(md|exe|sh|bak|inc|pot|po|mo|log|sql)$ {" . PHP_EOL;
        $rules .= '  deny all;' . PHP_EOL;
        $rules .= '}' . PHP_EOL;
        $rules .= '## WP Defender - End ##' . PHP_EOL;
        
        return $rules;
    }
    
    /**
     * Generate PHP execution prevention rules
     */
    public function get_php_execution_prevention_rules() {
        $rules = '';
        $rules .= '## WP Defender - Prevent PHP Execution ##' . PHP_EOL;
        
        // Prevent PHP execution in uploads directory
        $rules .= '# Prevent PHP execution in uploads directory' . PHP_EOL;
        $rules .= 'location ~* /(?:uploads|files)/.*\.php$ {' . PHP_EOL;
        $rules .= '  deny all;' . PHP_EOL;
        $rules .= '}' . PHP_EOL;
        $rules .= PHP_EOL;
        
        // Prevent PHP execution in wp-content (with exceptions)
        $rules .= '# Prevent PHP execution in wp-content (with exceptions)' . PHP_EOL;
        $rules .= 'location ~* ^/wp-content/.*\.php$ {' . PHP_EOL;
        $rules .= '  # Allow specific directories' . PHP_EOL;
        $rules .= '  location ~* ^/wp-content/plugins/.*\.php$ {' . PHP_EOL;
        $rules .= '    try_files $uri =404;' . PHP_EOL;
        $rules .= '    fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;' . PHP_EOL;
        $rules .= '    fastcgi_index index.php;' . PHP_EOL;
        $rules .= '    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;' . PHP_EOL;
        $rules .= '    include fastcgi_params;' . PHP_EOL;
        $rules .= '  }' . PHP_EOL;
        $rules .= '  location ~* ^/wp-content/themes/.*\.php$ {' . PHP_EOL;
        $rules .= '    try_files $uri =404;' . PHP_EOL;
        $rules .= '    fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;' . PHP_EOL;
        $rules .= '    fastcgi_index index.php;' . PHP_EOL;
        $rules .= '    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;' . PHP_EOL;
        $rules .= '    include fastcgi_params;' . PHP_EOL;
        $rules .= '  }' . PHP_EOL;
        $rules .= '  # Deny all other PHP files' . PHP_EOL;
        $rules .= '  deny all;' . PHP_EOL;
        $rules .= '}' . PHP_EOL;
        $rules .= '## WP Defender - End ##' . PHP_EOL;
        
        return $rules;
    }
}
```

### **PMPro File Upload Security with Directory Protection**
**Pattern Source**: PMPro classes/class-pmpro-field.php, includes/functions.php
**Index Terms**: `file_access`, `upload_security`, `directory_protection`

```php
// ✅ GOOD: PMPro secure file upload with directory protection
// Pattern from paid-memberships-pro/classes/class-pmpro-field.php
class PMPro_Secure_File_Upload {
    
    /**
     * Handle secure file upload with proper directory protection
     */
    public function handle_secure_file_upload($name, $user_id) {
        // Validate upload first
        $upload_check = pmpro_check_upload($name);
        if (is_wp_error($upload_check)) {
            pmpro_setMessage($upload_check->get_error_message(), 'pmpro_error');
            return;
        }
        
        $user = get_userdata($user_id);
        $meta_key = str_replace("pmprorhprefix_", "", $name);
        
        // Get file and validate
        $file = array_map('sanitize_text_field', $_FILES[$name]);
        $filetype = wp_check_filetype_and_ext($file['tmp_name'], $file['name']);
        
        // Create secure directory structure
        $upload_dir = wp_upload_dir();
        $dir_path = $upload_dir['basedir'] . "/pmpro-register-helper/" . $user->user_login . "/";
        $dir_url = $upload_dir['baseurl'] . "/pmpro-register-helper/" . $user->user_login . "/";
        
        // Create directory with proper permissions
        if (!is_dir($dir_path)) {
            wp_mkdir_p($dir_path);
            
            // Add security files to directory
            $this->secure_directory($dir_path);
        }
        
        // Remove old file if exists
        $old_file = get_user_meta($user->ID, $meta_key, true);
        if (!empty($old_file) && !empty($old_file['fullpath']) && file_exists($old_file['fullpath'])) {
            unlink($old_file['fullpath']);
        }
        
        // Generate secure filename
        $filename = sanitize_file_name($file['name']);
        $count = 0;
        
        while (file_exists($dir_path . $filename)) {
            if ($count) {
                $filename = str_lreplace("-" . $count . "." . $filetype['ext'], 
                                        "-" . strval($count+1) . "." . $filetype['ext'], 
                                        $filename);
            } else {
                $filename = str_lreplace("." . $filetype['ext'], 
                                        "-1." . $filetype['ext'], 
                                        $filename);
            }
            $count++;
            
            // Prevent infinite loops
            if ($count > 50) {
                die(esc_html__("Error uploading file. Too many files with the same name.", "paid-memberships-pro"));
            }
        }
        
        $file_path = $dir_path . $filename;
        $file_url = $dir_url . $filename;
        
        // Validate file was uploaded via HTTP POST
        if (!is_uploaded_file($file['tmp_name'])) {
            pmpro_setMessage(
                sprintf(esc_html__('Sorry, the file %s was not uploaded.', 'paid-memberships-pro'), $file['name']), 
                'pmpro_error'
            );
            return false;
        }
        
        // Move uploaded file securely
        move_uploaded_file($file['tmp_name'], $file_path);
        
        // Set proper file permissions
        chmod($file_path, 0644);
        
        // Generate preview for images
        if ($filetype && 0 === strpos($filetype['type'], 'image/')) {
            $preview_file = wp_get_image_editor($file_path);
            if (!is_wp_error($preview_file)) {
                $preview_file->resize(400, 400, false);
                $preview_file->generate_filename('pmpro_file_preview');
                $preview_file = $preview_file->save();
            }
        }
        
        // Store file metadata securely
        $file_meta = array(
            'filename' => $filename,
            'fullpath' => str_replace("\\", "/", $file_path),
            'url' => str_replace("\\", "/", $file_url),
            'size' => $file['size'],
            'type' => $filetype['type'],
            'ext' => $filetype['ext'],
        );
        
        if (!empty($preview_file) && !is_wp_error($preview_file)) {
            $file_meta['previewpath'] = str_replace("\\", "/", $preview_file['path']);
        }
        
        update_user_meta($user->ID, $meta_key, $file_meta);
        
        return $file_meta;
    }
    
    /**
     * Secure directory with .htaccess and index.php
     */
    private function secure_directory($dir_path) {
        // Add .htaccess to prevent direct access
        $htaccess_content = "Options -Indexes\n";
        $htaccess_content .= "Order deny,allow\n";
        $htaccess_content .= "Deny from all\n";
        $htaccess_content .= "<Files ~ \"\\.(jpg|jpeg|png|gif|pdf|doc|docx)$\">\n";
        $htaccess_content .= "    Order allow,deny\n";
        $htaccess_content .= "    Allow from all\n";
        $htaccess_content .= "</Files>\n";
        
        file_put_contents($dir_path . '.htaccess', $htaccess_content);
        
        // Add index.php to prevent directory listing
        file_put_contents($dir_path . 'index.php', '<?php // Silence is golden');
    }
}
```

## 📁 **File Upload Security & Validation** (`file_upload`)

### **PMPro Comprehensive File Upload Validation**
**Pattern Source**: PMPro includes/functions.php, classes/class-pmpro-field.php
**Index Terms**: `file_upload`, `file_validation`, `upload_security`

```php
// ✅ GOOD: PMPro comprehensive file upload validation
// Pattern from paid-memberships-pro/includes/functions.php
function pmpro_check_upload( $file_index ) {
    // Check if the file was uploaded.
    if ( empty( $_FILES[ $file_index ] ) ) {
        return new WP_Error( 'pmpro_upload_error', __( 'No file was uploaded.', 'paid-memberships-pro' ) );
    }

    // Get the file info and sanitize it.
    $file = array_map( 'sanitize_text_field', $_FILES[ $file_index ] );
    if ( empty( $file['name'] ) ) {
        return new WP_Error( 'pmpro_upload_error', __( 'No file name found.', 'paid-memberships-pro' ) );
    }

    // If the current user cannot upload unfiltered files, check file type.
    if ( ! current_user_can( 'unfiltered_upload' ) ) {
        $filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'] );
        if ( empty( $filetype['ext'] ) || empty( $filetype['type'] ) ) {
            return new WP_Error( 'pmpro_upload_error', __( 'Invalid file type.', 'paid-memberships-pro' ) );
        }
    }

    // If this is an upload for a user field, perform additional checks.
    $field = PMPro_Field::get_field( $file_index );
    if ( ! empty( $field ) ) {
        // First, make sure that this is a 'file' field.
        if ( $field->type !== 'file' ) {
            return new WP_Error( 'pmpro_upload_error', __( 'Invalid field input.', 'paid-memberships-pro' ) );
        }

        // Check the file type against the allowed types.
        $allowed_mime_types = ! empty( $field->allowed_file_types ) ? array_map( 'sanitize_text_field', explode( ',', $field->allowed_file_types ) ) : array();

        // Remove fullstops from the beginning of the allowed file types.
        $allowed_mime_types = array_map( function( $type ) {
            return ltrim( $type, '.' );
        }, $allowed_mime_types );

        // Check the file type against the allowed types.
        if ( ! empty( $allowed_mime_types ) && ! in_array( $filetype['ext'], $allowed_mime_types ) ) {
            return new WP_Error( 'pmpro_upload_file_type_error', sprintf( esc_html__( 'Invalid file type. Please try uploading the file type(s): %s', 'paid-memberships-pro' ), implode( ',' ,$allowed_mime_types ) ) );
        }
        
        // Check if the file upload is too big.
        if ( $field->max_file_size > 0 ) {
            $upload_max_file_size_in_bytes = $field->max_file_size * 1024 * 1024;
            if ( $file['size'] > $upload_max_file_size_in_bytes ) {
                return new WP_Error( 'pmpro_upload_file_size_error', sprintf( esc_html__( 'File size is too large for %s. Please upload files smaller than %dMB.', 'paid-memberships-pro' ), $field->label, $field->max_file_size ) );
            }
        }
    }

    // If we made it this far, the file is allowed.
    return true;
}

// ✅ GOOD: PMPro secure file upload with validation
// Pattern from paid-memberships-pro/classes/class-pmpro-field.php
private function saveFile( $user_id, $name, $value, $field ) {
    // Setup some vars
    $user = get_userdata($user_id);
    $meta_key = str_replace("pmprorhprefix_", "", $name);

    // Check if we can upload the file.
    $upload_check = pmpro_check_upload( $name );
    if ( is_wp_error( $upload_check ) ) {
        pmpro_setMessage( $upload_check->get_error_message(), 'pmpro_error' );
        return;
    }

    // Get $file and $filetype.
    $file = array_map( 'sanitize_text_field', $_FILES[ $name ] );
    $filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'] );

    // Make sure file was uploaded during this page load.
    if ( ! is_uploaded_file( $file['tmp_name'] ) ) {
        pmpro_setMessage( sprintf( esc_html__( 'Sorry, the file %s was not uploaded.', 'paid-memberships-pro' ), $file['name'] ), 'pmpro_error' );
        return false;
    }

    // Create secure upload directory
    $upload_dir = wp_upload_dir();
    $dir_path = $upload_dir['basedir'] . "/pmpro-register-helper/" . $user->user_login . "/";
    $dir_url  = $upload_dir['baseurl'] . "/pmpro-register-helper/" . $user->user_login . "/";

    // Create the dir and subdir if needed
    if(!is_dir($dir_path)) {
        wp_mkdir_p($dir_path);
    }

    // If we already have a file for this field, delete it
    $old_file = get_user_meta($user->ID, $meta_key, true);
    if(!empty($old_file) && !empty($old_file['fullpath']) && file_exists($old_file['fullpath'])) {
        unlink($old_file['fullpath']);
    }

    // Figure out new filename with collision handling
    $filename = sanitize_file_name( $file['name'] );
    $count = 0;

    while(file_exists($dir_path . $filename)) {
        if($count)
            $filename = str_lreplace("-" . $count . "." . $filetype['ext'], "-" . strval($count+1) . "." . $filetype['ext'], $filename);
        else
            $filename = str_lreplace("." . $filetype['ext'], "-1." . $filetype['ext'], $filename);

        $count++;

        // Let's not expect more than 50 files with the same name
        if($count > 50)
            die( esc_html__( "Error uploading file. Too many files with the same name.", "paid-memberships-pro" ) );
    }

    $file_path = $dir_path . $filename;
    $file_url = $dir_url . $filename;

    // Save file securely
    if(strpos($file['tmp_name'], $upload_dir['basedir']) !== false) {
        // Was uploaded and saved to $_SESSION
        rename($file['tmp_name'], $file_path);
    } else {
        // It was just uploaded
        move_uploaded_file($file['tmp_name'], $file_path);
    }

    // If file is an image, save a preview thumbnail
    if ( $filetype && 0 === strpos( $filetype['type'], 'image/' ) ) {
        $preview_file = wp_get_image_editor( $file_path );
        if ( ! is_wp_error( $preview_file ) ) {
            $preview_file->resize( 400, 400, false );
            $preview_file->generate_filename( 'pmpro_file_preview' );
            $preview_file = $preview_file->save();
        }
    }

    // Store file metadata securely
    $file_meta_value_array = array(
        'original_filename' => $file['name'],
        'filename'          => $filename,
        'fullpath'          => $file_path,
        'fullurl'           => $file_url,
        'size'              => $file['size'],
    );

    if ( ! empty( $preview_file ) && ! is_wp_error( $preview_file ) ) {
        $file_meta_value_array['previewpath'] = $preview_file['path'];
        $file_meta_value_array['previewurl'] = $dir_url .  $preview_file['file'];
    }

    // Save filename in usermeta
    update_user_meta($user_id, $meta_key, $file_meta_value_array );
}
```

### **WP Defender File Security & Malware Scanning**
**Pattern Source**: WP Defender src/functions.php, src/behavior/scan/class-malware-scan.php
**Index Terms**: `file_upload`, `malware_scanning`, `file_security`

```php
// ✅ GOOD: WP Defender secure file data retrieval
// Pattern from wp-defender/src/functions.php
function defender_get_data_from_request( ?string $key, string $source ) {
    // Handle file uploads securely
    if ( 'f' === $source && 'file' === $key && isset( $_FILES[ $key ] ) ) {
        if ( ! empty( $_FILES[ $key ]['name'] ) ) {
            $_FILES[ $key ]['name'] = sanitize_file_name( $_FILES[ $key ]['name'] );
        }
        return $_FILES[ $key ];
    }
    
    // Handle other data types
    switch ( $source ) {
        case 'r':
            $data = $_REQUEST;
            break;
        case 'f':
            $data = $_FILES;
            break;
        default:
            $data = array();
            break;
    }

    if ( empty( $key ) ) {
        return $data;
    }

    return sanitize_text_field( wp_unslash( $data[ $key ] ?? '' ) );
}

// ✅ GOOD: WP Defender malware scanning for uploaded files
// Pattern from wp-defender/src/behavior/scan/class-malware-scan.php
public function suspicious_check( $quick_scan, $deep_scan ): bool {
    $files = get_site_option( Gather_Fact::CACHE_CONTENT, array() );
    if ( empty( $files ) ) {
        return true;
    }

    set_time_limit( 0 );
    $this->prepare_emergency_shutdown();
    $timer = new Timer();
    $rules = $this->fetch_yara_rules();

    $model = $this->scan;
    $pos   = (int) $model->task_checkpoint;

    // Skip to the position where we left off
    $files->seek( $pos );

    while ( $files->valid() && ! $timer->is_timeout() ) {
        [ $result, $qs_detail ] = $quick_scan->do_quick_scan( $files->current(), $rules );
        if ( $result ) {
            $this->log( sprintf( 'file %s suspicious', $files->current() ), self::MALWARE_LOG );
            $result = $deep_scan->do_deep_scan( $files->current(), $rules, $qs_detail );
            
            // Add new item if suspicious code is found
            if ( is_array( $result ) && $this->was_modificated_file( $files->current(), $combinations ) ) {
                $result['file'] = $files->current();
                $model->add_item( Scan_Item::TYPE_SUSPICIOUS, $result );
            }
        }
        $files->next();
        $files_key = $files->key();
        $model->task_checkpoint = ! is_null( $files_key ) ? $files_key : '';
        $model->calculate_percent( $files_key * 100 / $files->count(), 6 );
        
        if ( 0 === $files_key % 100 ) {
            // Update the model percent each 100 files
            $model->save();
        }
    }

    return ! $files->valid();
}

// ✅ GOOD: WP Defender secure file deletion
// Pattern from wp-defender/src/traits/file-operations.php
public function delete_infected_file( string $file ): bool {
    global $wp_filesystem;
    // Initialize the WP filesystem
    if ( empty( $wp_filesystem ) ) {
        require_once ABSPATH . '/wp-admin/includes/file.php';
        WP_Filesystem();
    }
    
    return file_exists( $file ) && $wp_filesystem->is_writable( $file ) && $wp_filesystem->delete( $file );
}

// ✅ GOOD: WP Defender quarantine system for infected files
// Pattern from wp-defender/src/component/class-quarantine.php
private function prepare_file_metadata( Scan_Item $scan_item ): Quarantine_Model {
    $file = $scan_item->raw_data['file'];
    
    $file_hash = (string) sha1_file( $file ) . uniqid();
    $path_info = pathinfo( $file );
    $mime = (string) mime_content_type( $file );
    $perms = $this->get_octet_fileperms( $file );
    $file_owner = (string) fileowner( $file );
    $file_group = (string) filegroup( $file );
    
    $mtime = wp_date( 'Y-m-d H:i:s', (int) filemtime( $file ) );
    $created_time = wp_date( 'Y-m-d H:i:s' );
    $created_by = get_current_user_id();
    
    $this->quarantine_model->defender_scan_item_id = $scan_item->id;
    $this->quarantine_model->file_hash             = $file_hash;
    $this->quarantine_model->file_full_path        = $file;
    $this->quarantine_model->file_original_name    = $path_info['filename'];
    $this->quarantine_model->file_extension        = isset( $path_info['extension'] ) ? $path_info['extension'] : '';
    $this->quarantine_model->file_mime_type        = $mime;
    $this->quarantine_model->file_rw_permission    = $perms;
    $this->quarantine_model->file_owner            = $file_owner;
    $this->quarantine_model->file_group            = $file_group;
    $this->quarantine_model->file_modified_time    = $mtime;
    $this->quarantine_model->created_time          = $created_time;
    $this->quarantine_model->created_by            = $created_by;
    
    return $this->quarantine_model;
}
```

### **PMPro File Access Control System**
**Pattern Source**: PMPro services/getfile.php, includes/profile.php
**Index Terms**: `file_upload`, `access_control`, `file_protection`

```php
// ✅ GOOD: PMPro secure file access control
// Pattern from paid-memberships-pro/services/getfile.php
function pmpro_secure_file_access() {
    global $wpdb;

    // Get the file path and sanitize it
    $uri = sanitize_text_field( $_SERVER['REQUEST_URI'] );
    $uri_parts = explode( '?', $uri );
    $uri = $uri_parts[0];

    // Take the / off of the beginning
    if ( '/' === $uri[0] ) {
        $uri = substr( $uri, 1, strlen( $uri ) - 1 );
    }
    
    // Decode the file in case it's encoded
    $uri = urldecode( $uri );
    
    // Remove ../-like strings from the URI to prevent traversal attacks
    $uri = preg_replace("/[\.\/\\\\]{2,}/", "", $uri);
    
    // Handle WordPress subdirectory installations
    $home_url_parts = explode("/", str_replace("//", "", home_url()));    
    if(count($home_url_parts) > 1) {
        $uri_parts = explode("/", $uri);
        $new_uri_parts = array();        
        for($i = count($home_url_parts) - 1; $i < count($uri_parts); $i++)
            $new_uri_parts[] = $uri_parts[$i];
        $new_uri = implode("/", $new_uri_parts);
    } else {
        $new_uri = $uri;
    }
    
    $filename = ABSPATH . $new_uri;
    
    // Only check permissions if not in admin
    if(!is_admin()) {
        $upload_dir = wp_upload_dir();
        $filename_small = substr($filename, strlen($upload_dir['basedir']) + 1, strlen($filename) - strlen($upload_dir['basedir']) - 1);
        
        // Look the file up in the database
        $sqlQuery = "SELECT post_parent FROM $wpdb->posts WHERE ID = (SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_wp_attached_file' AND meta_value = '" . esc_sql($filename_small) . "' LIMIT 1) LIMIT 1";        
        $file_post_parent = $wpdb->get_var($sqlQuery);
        
        // Check access permissions
        if($file_post_parent) {
            if(!pmpro_has_membership_access($file_post_parent)) {
                // Hook for users without access
                do_action("pmpro_getfile_before_error", $filename, $file_post_parent);
                
                // Access denied
                header('HTTP/1.1 503 Service Unavailable', true, 503);
                echo "HTTP/1.1 503 Service Unavailable";
                exit;
            }
        }        
    }
    
    // Check if file exists
    if(!file_exists($filename)) {
        status_header( 404 );
        nocache_headers();        
        die("File not found.");
    }
    
    // Check for blacklisted file types
    $basename = basename($filename);
    $parts = explode('.', $basename);
    $ext = strtolower($parts[count($parts)-1]);
    
    // Build blacklist and allow for filtering
    $blacklist = array("inc", "php", "php3", "php4", "php5", "phps", "phtml");
    $blacklist = apply_filters("pmpro_getfile_extension_blacklist", $blacklist);

    // Check against blacklist
    if(in_array($ext, $blacklist)) {
        // Redirect to prevent direct execution
        wp_redirect(home_url($new_uri . '?noloop=1'));
        exit;
    }
    
    // Get mimetype and serve file
    $mimetype = new pmpro_mimetype();           
    $file_mimetype = $mimetype->getType($filename);
    
    // Hook before serving file
    do_action("pmpro_getfile_before_readfile", $filename, $file_mimetype);
    
    // Serve the file
    header('Content-Type: ' . $file_mimetype);
    readfile($filename);
    exit;
}
```

### **WP Defender File Integrity Checking**
**Pattern Source**: WP Defender src/behavior/scan/class-plugin-integrity.php
**Index Terms**: `file_upload`, `integrity_check`, `file_validation`

```php
// ✅ GOOD: WP Defender file integrity validation
// Pattern from wp-defender/src/behavior/scan/class-plugin-integrity.php
private function file_is_valid_image( $file_path ): bool {
    $mime = wp_check_filetype( $file_path );
    if ( false === $mime['type'] ) {
        return false;
    }

    return false !== strpos( $mime['type'], 'image' );
}

// ✅ GOOD: WP Defender secure file content validation
public function validate_file_content( $file_path, $expected_checksum = null ) {
    global $wp_filesystem;
    
    // Initialize the WP filesystem
    if ( empty( $wp_filesystem ) ) {
        require_once ABSPATH . '/wp-admin/includes/file.php';
        WP_Filesystem();
    }
    
    if ( ! file_exists( $file_path ) ) {
        return new WP_Error( 'file_not_found', 'File does not exist' );
    }
    
    // Check file permissions
    if ( ! $wp_filesystem->is_readable( $file_path ) ) {
        return new WP_Error( 'file_not_readable', 'File is not readable' );
    }
    
    // Get file content
    $content = $wp_filesystem->get_contents( $file_path );
    if ( false === $content ) {
        return new WP_Error( 'file_read_error', 'Could not read file content' );
    }
    
    // Validate checksum if provided
    if ( ! empty( $expected_checksum ) ) {
        $actual_checksum = sha1( $content );
        if ( $actual_checksum !== $expected_checksum ) {
            return new WP_Error( 'checksum_mismatch', 'File checksum does not match expected value' );
        }
    }
    
    return true;
}
```

### **❌ AVOID: Common File Upload Security Mistakes**

```php
// ❌ BAD: No file type validation
function unsafe_file_upload() {
    if ( isset( $_FILES['upload'] ) ) {
        move_uploaded_file( $_FILES['upload']['tmp_name'], 'uploads/' . $_FILES['upload']['name'] );
        // No validation, allows any file type including PHP
    }
}

// ❌ BAD: Client-side only validation
function client_side_validation() {
    // JavaScript validation can be bypassed
    if ( $_FILES['file']['type'] === 'image/jpeg' ) {
        // Trusting client-provided MIME type
        move_uploaded_file( $_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name'] );
    }
}

// ❌ BAD: No file size limits
function no_size_limits() {
    // No size validation - could lead to disk space exhaustion
    move_uploaded_file( $_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name'] );
}

// ❌ BAD: Unsafe file naming
function unsafe_naming() {
    $filename = $_FILES['file']['name']; // Not sanitized
    move_uploaded_file( $_FILES['file']['tmp_name'], 'uploads/' . $filename );
    // Could allow directory traversal: ../../../etc/passwd
}

// ❌ BAD: No upload verification
function no_upload_verification() {
    // Not checking if file was actually uploaded via HTTP POST
    move_uploaded_file( $_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name'] );
}

// ❌ BAD: Executable file types allowed
function allow_executables() {
    $allowed_types = array( 'jpg', 'png', 'gif', 'php', 'exe' );
    // Allowing executable files is dangerous
    if ( in_array( $file_extension, $allowed_types ) ) {
        move_uploaded_file( $_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name'] );
    }
}
```

## 🔒 **Security Headers** (`security_headers`)

### **PMPro HTTPS and SSL Security Headers**
**Pattern Source**: PMPro includes/https.php, adminpages/securitysettings.php
**Index Terms**: `security_headers`, `https_security`, `ssl_enforcement`

```php
// ✅ GOOD: PMPro comprehensive HTTPS and SSL security implementation
// Pattern from paid-memberships-pro/includes/https.php
class PMPro_HTTPS_Security {
    
    /**
     * Status header filter for secure pages
     */
    public function pmpro_status_filter($s) {
        global $isapage;
        if ($isapage && strpos($s, '404')) {
            return false; // Don't send the 404
        }
        return $s;
    }
    
    /**
     * HTTPS URL filter for secure content
     */
    public function pmpro_https_filter($s) {
        global $besecure;
        $besecure = apply_filters('pmpro_besecure', $besecure);
        
        if ($besecure || is_ssl()) {
            return str_replace('http:', 'https:', $s);
        } else {
            return str_replace('https:', 'http:', $s);
        }
    }
    
    /**
     * Enforce SSL/HTTPS security based on settings
     */
    public function pmpro_besecure() {
        global $besecure, $post;
        
        // Check post-specific security requirements
        if (!is_admin() && !empty($post->ID) && !$besecure) {
            $besecure = get_post_meta($post->ID, 'besecure', true);
        }
        
        // Force SSL on admin if configured
        if (!$besecure && force_ssl_admin() && (is_admin() || pmpro_is_login_page())) {
            $besecure = true;
        }
        
        $besecure = apply_filters('pmpro_besecure', $besecure);
        $use_ssl = get_option('pmpro_use_ssl');
        
        if ($use_ssl == 1) {
            if ($besecure && (empty($_SERVER['HTTPS']) || $_SERVER['HTTPS'] == 'off' || $_SERVER['HTTPS'] == 'false')) {
                // Need to be secure
                wp_safe_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
                exit;
            } elseif (!$besecure && !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off' && $_SERVER['HTTPS'] != 'false') {
                // Don't need to be secure
                wp_safe_redirect('http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
                exit;
            }
        }
    }
    
    /**
     * JavaScript SSL redirect for compatibility
     */
    public function pmpro_ssl_javascript_redirect() {
        global $besecure;
        $use_ssl = get_option('pmpro_use_ssl');
        
        if (!is_admin() && $use_ssl == 2) {
            if (!empty($besecure)) {
                ?>
                <script type="text/javascript">
                    // Needs to be secure
                    if (window.location.protocol !== "https:") {
                        window.location.href = "https:" + window.location.href.substring(window.location.protocol.length);
                    }
                </script>
                <?php
            } else {
                ?>
                <script type="text/javascript">
                    // Should be over http
                    if (window.location.protocol !== "http:") {
                        window.location.href = "http:" + window.location.href.substring(window.location.protocol.length);
                    }
                </script>
                <?php
            }
        }
    }
    
    /**
     * Nuclear HTTPS option - force all URLs to HTTPS
     */
    public function pmpro_nuclear_https() {
        $nuking = get_option('pmpro_nuclear_HTTPS');
        if (!empty($nuking)) {
            ob_start('pmpro_replace_urls_in_buffer');
        }
    }
    
    /**
     * Replace URLs in buffer for nuclear HTTPS
     */
    public function pmpro_replace_urls_in_buffer($buffer) {
        global $besecure;
        
        // Only swap URLs if this page is secure
        if ($besecure) {
            $domain = str_replace(".", "\.", PMPRO_DOMAIN);
            $buffer = preg_replace("/http\:\/\/([a-zA-Z0-9\.\-]*" . $domain . ")/i", "https://$1", $buffer);
        }
        
        return $buffer;
    }
    
    /**
     * Check if site URL uses HTTPS
     */
    public function pmpro_check_site_url_for_https($besecure = null) {
        global $wpdb, $pmpro_siteurl;
        
        // Get from database because we filter get_option
        if (empty($pmpro_siteurl)) {
            $pmpro_siteurl = $wpdb->get_var("SELECT option_value FROM $wpdb->options WHERE option_name = 'siteurl' LIMIT 1");
        }
        
        // Entire site is over HTTPS?
        if (strpos($pmpro_siteurl, 'https:') !== false) {
            $besecure = true;
        }
        
        return $besecure;
    }
    
    /**
     * Send 200 HTTP response for webhook compatibility
     */
    public function pmpro_send_200_http_response() {
        if (!apply_filters('pmpro_send_200_http_response', false)) {
            return;
        }
        
        // Nginx compatibility
        if (is_callable('fastcgi_finish_request')) {
            session_write_close();
            fastcgi_finish_request();
            return;
        }
        
        ignore_user_abort(true);
        ob_start();
        
        $server_protocol = filter_input(INPUT_SERVER, 'SERVER_PROTOCOL', FILTER_SANITIZE_STRING);
        if (!in_array($server_protocol, array('HTTP/1.1', 'HTTP/2', 'HTTP/2.0'), true)) {
            $server_protocol = 'HTTP/1.0';
        }
        
        header($server_protocol . ' 200 OK');
        header('Content-Encoding: none');
        header('Content-Length: ' . ob_get_length());
        header('Connection: close');
        
        ob_end_flush();
        ob_flush();
        flush();
    }
}

// Hook implementations
add_filter('status_header', 'pmpro_status_filter');
add_filter('bloginfo_url', 'pmpro_https_filter');
add_filter('wp_list_pages', 'pmpro_https_filter');
add_filter('option_home', 'pmpro_https_filter');
add_filter('option_siteurl', 'pmpro_https_filter');
add_filter('logout_url', 'pmpro_https_filter');
add_filter('login_url', 'pmpro_https_filter');
add_filter('home_url', 'pmpro_https_filter');
add_action('wp', 'pmpro_besecure', 2);
add_action('login_init', 'pmpro_besecure', 2);
add_action('wp_print_scripts', 'pmpro_ssl_javascript_redirect');
add_action('init', 'pmpro_nuclear_https');
add_filter('pmpro_besecure', 'pmpro_check_site_url_for_https');
```

### **WP Defender Comprehensive Security Headers System**
**Pattern Source**: WP Defender src/model/setting/class-security-headers.php, src/controller/class-security-headers.php
**Index Terms**: `security_headers`, `comprehensive_headers`, `header_management`

```php
// ✅ GOOD: WP Defender comprehensive security headers implementation
// Pattern from wp-defender/src/model/setting/class-security-headers.php
class WP_Defender_Security_Headers {
    
    /**
     * Security headers configuration
     */
    public $sh_xframe = false;
    public $sh_xframe_mode = 'sameorigin';
    public $sh_xss_protection = false;
    public $sh_xss_protection_mode = 'sanitize';
    public $sh_content_type_options = false;
    public $sh_content_type_options_mode = 'nosniff';
    public $sh_strict_transport = false;
    public $hsts_preload = 0;
    public $include_subdomain = 0;
    public $hsts_cache_duration = '30 days';
    public $sh_referrer_policy = false;
    public $sh_referrer_policy_mode = 'origin-when-cross-origin';
    public $sh_feature_policy = false;
    public $sh_feature_policy_mode = 'self';
    public $sh_feature_policy_urls = '';
    
    /**
     * Get all available security headers
     */
    public function get_headers(): array {
        return array(
            'sh_xframe' => new Sh_X_Frame(),
            'sh_xss_protection' => new Sh_XSS_Protection(),
            'sh_content_type_options' => new Sh_Content_Type_Options(),
            'sh_strict_transport' => new Sh_Strict_Transport(),
            'sh_referrer_policy' => new Sh_Referrer_Policy(),
            'sh_feature_policy' => new Sh_Feature_Policy(),
        );
    }
    
    /**
     * Validate security headers settings
     */
    protected function after_validate(): void {
        // Validate X-Frame-Options
        if (true === $this->sh_xframe && 
            (empty($this->sh_xframe_mode) || 
             !in_array($this->sh_xframe_mode, array('sameorigin', 'deny'), true))) {
            $this->errors[] = esc_html__('X-Frame-Options mode is invalid', 'wpdef');
        }
        
        // Validate XSS Protection
        if (true === $this->sh_xss_protection && 
            (empty($this->sh_xss_protection_mode) || 
             !in_array($this->sh_xss_protection_mode, array('sanitize', 'block', 'none'), true))) {
            $this->errors[] = esc_html__('X-XSS-Protection mode is invalid', 'wpdef');
        }
        
        // Validate Referrer Policy
        if (true === $this->sh_referrer_policy && 
            (empty($this->sh_referrer_policy_mode) || 
             !in_array($this->sh_referrer_policy_mode, array(
                 'no-referrer',
                 'no-referrer-when-downgrade',
                 'origin',
                 'origin-when-cross-origin',
                 'same-origin',
                 'strict-origin',
                 'strict-origin-when-cross-origin',
                 'unsafe-url',
             ), true))) {
            $this->errors[] = esc_html__('Referrer Policy mode is invalid', 'wpdef');
        }
    }
    
    /**
     * Check if any security headers are activated
     */
    public function is_any_activated(): bool {
        return (
            true === $this->sh_xframe ||
            true === $this->sh_xss_protection ||
            true === $this->sh_content_type_options ||
            true === $this->sh_feature_policy ||
            true === $this->sh_strict_transport ||
            true === $this->sh_referrer_policy
        );
    }
    
    /**
     * Get headers by type (active/inactive)
     */
    public function get_headers_by_type(string $type = 'both'): array {
        $headers = array(
            'active' => array(),
            'inactive' => array(),
        );
        
        if (!in_array($type, array('active', 'inactive', 'both'), true)) {
            return $headers;
        }
        
        $url = network_admin_url('admin.php?page=wdf-advanced-tools&view=security-headers#');
        
        foreach ($this->get_headers() as $header) {
            $key = true === $header->check() ? 'active' : 'inactive';
            $headers[$key][] = array(
                'title' => $header->get_title(),
                'url' => $url . $header::$rule_slug,
            );
        }
        
        return 'both' === $type ? $headers : $headers[$type];
    }
}
```

### **WP Defender X-Frame-Options Header Implementation**
**Pattern Source**: WP Defender src/component/security-headers/class-sh-x-frame.php
**Index Terms**: `security_headers`, `x_frame_options`, `clickjacking_protection`

```php
// ✅ GOOD: WP Defender X-Frame-Options header implementation
// Pattern from wp-defender/src/component/security-headers/class-sh-x-frame.php
class WP_Defender_X_Frame_Options {
    
    public static $rule_slug = 'sh_xframe';
    
    /**
     * Check if X-Frame-Options should be applied
     */
    public function check() {
        $model = $this->get_model();
        
        if (!$model->sh_xframe) {
            return false;
        }
        
        if (isset($model->sh_xframe_mode) && !empty($model->sh_xframe_mode)) {
            return true;
        }
        
        // Check existing headers
        $headers = $this->head_request(network_site_url(), self::$rule_slug);
        if (is_wp_error($headers)) {
            $this->log(sprintf('Self ping error: %s', $headers->get_error_message()), wd_internal_log());
            return false;
        }
        
        if (isset($headers['x-frame-options'])) {
            $header_xframe = is_array($headers['x-frame-options']) 
                ? $headers['x-frame-options'][0] 
                : $headers['x-frame-options'];
            
            $content = strtolower(trim($header_xframe));
            
            // Handle deprecated ALLOW-FROM directive
            if (stristr($content, 'allow-from')) {
                $model->sh_xframe_mode = 'sameorigin';
            } elseif (in_array(strtolower($content), array('sameorigin', 'deny'), true)) {
                $model->sh_xframe_mode = strtolower($content);
            }
            
            $model->save();
            return true;
        }
        
        return false;
    }
    
    /**
     * Get miscellaneous data for X-Frame-Options
     */
    public function get_misc_data() {
        $model = $this->get_model();
        
        return array(
            'intro_text' => sprintf(
                esc_html__('The X-Frame-Options HTTP response header controls whether or not a browser can render a webpage inside a %1$s or %2$s tag. Websites can avoid clickjacking attacks by ensuring that their content isn\'t embedded into other websites.', 'wpdef'),
                '<frame>, <iframe>',
                '<object>'
            ),
            'mode' => (isset($model->sh_xframe_mode) && 'allow-from' !== $model->sh_xframe_mode)
                ? $model->sh_xframe_mode
                : 'sameorigin',
        );
    }
    
    /**
     * Register hooks for X-Frame-Options
     */
    public function add_hooks() {
        add_action('send_headers', array($this, 'append_header'));
    }
    
    /**
     * Append X-Frame-Options header
     */
    public function append_header() {
        if (headers_sent()) {
            return;
        }
        
        if (!$this->maybe_submit_header('X-Frame-Options', false)) {
            return;
        }
        
        $model = $this->get_model();
        $mode = $model->sh_xframe_mode;
        
        if (true === $model->sh_xframe && in_array($mode, array('sameorigin', 'allow-from', 'deny'), true)) {
            $mode = 'allow-from' === $mode ? 'sameorigin' : $mode;
            header(trim('X-Frame-Options: ' . $mode));
        }
    }
}
```

### **WP Defender Strict Transport Security (HSTS) Implementation**
**Pattern Source**: WP Defender src/component/security-headers/class-sh-strict-transport.php
**Index Terms**: `security_headers`, `hsts`, `strict_transport_security`

```php
// ✅ GOOD: WP Defender HSTS implementation
// Pattern from wp-defender/src/component/security-headers/class-sh-strict-transport.php
class WP_Defender_HSTS {
    
    public static $rule_slug = 'sh_strict_transport';
    
    /**
     * Get time durations in seconds
     */
    private function time_in_seconds() {
        return array(
            '1 hour' => 1 * 3600,
            '24 hours' => 86400,
            '7 days' => 7 * 86400,
            '30 days' => 30 * 86400,
            '3 months' => (3 * 30 + 1) * 86400,
            '6 months' => (6 * 30 + 3) * 86400,
            '1 year' => 365 * 86400,
            '2 years' => 365 * 2 * 86400,
        );
    }
    
    /**
     * Check if HTTPS is being used
     */
    private function is_https() {
        return isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && 
               'https' === $_SERVER['HTTP_X_FORWARDED_PROTO'];
    }
    
    /**
     * Check if HSTS should be applied
     */
    public function check() {
        $model = $this->get_model();
        
        if (!$model->sh_strict_transport) {
            return false;
        }
        
        // max-age directive is required
        if (!empty($model->hsts_cache_duration)) {
            return true;
        }
        
        $headers = $this->head_request(network_site_url(), self::$rule_slug);
        if (is_wp_error($headers)) {
            $this->log(sprintf('Self ping error: %s', $headers->get_error_message()), wd_internal_log());
            return false;
        }
        
        return isset($headers['strict-transport-security']);
    }
    
    /**
     * Get HSTS miscellaneous data
     */
    public function get_misc_data() {
        $model = $this->get_model();
        
        // Check if subdomains are allowed
        $allow_subdomain = false;
        $domain_data = $this->get_domain_data();
        
        if (is_array($domain_data) && !isset($domain_data['subdomain'])) {
            $allow_subdomain = true;
        } elseif (!$domain_data && !is_multisite()) {
            $allow_subdomain = true;
        } elseif (!$domain_data && is_multisite() && is_subdomain_install() && is_main_site()) {
            $allow_subdomain = true;
        }
        
        return array(
            'intro_text' => esc_html__(
                'The HTTP Strict-Transport-Security response header (HSTS) lets a web site tell browsers that it should only be accessed using HTTPS, instead of using HTTP. This is extremely important for websites that store and process sensitive information like ECommerce stores and helps prevent Protocol Downgrade and Clickjacking attacks.',
                'wpdef'
            ),
            'hsts_preload' => $model->hsts_preload ?? 0,
            'include_subdomain' => $model->include_subdomain ?? 0,
            'hsts_cache_duration' => $model->hsts_cache_duration ?? '30 days',
            'allow_subdomain' => $allow_subdomain,
        );
    }
    
    /**
     * Register HSTS hooks
     */
    public function add_hooks() {
        add_action('send_headers', array($this, 'append_header'));
    }
    
    /**
     * Append HSTS header
     */
    public function append_header() {
        if (headers_sent()) {
            return;
        }
        
        if (!$this->maybe_submit_header('Strict-Transport-Security', false)) {
            return;
        }
        
        $model = $this->get_model();
        
        if (true === $model->sh_strict_transport) {
            $headers = 'Strict-Transport-Security:';
            $default_max_age = 604800; // 1 week
            
            if (isset($model->hsts_cache_duration) && !empty($model->hsts_cache_duration)) {
                $arr = $this->time_in_seconds();
                $seconds = $arr[$model->hsts_cache_duration] ?? $default_max_age;
                if (!is_null($seconds)) {
                    $headers .= ' max-age=' . $seconds;
                }
            } else {
                $headers .= ' max-age=' . $default_max_age;
            }
            
            if ('1' === (string) $model->include_subdomain) {
                $headers .= ' ; includeSubDomains';
            }
            
            if ('1' === (string) $model->hsts_preload) {
                $headers .= ' ; preload';
            }
            
            header($headers);
        }
    }
}
```

### **WP Defender Content Security Policy (CSP) Implementation**
**Pattern Source**: WP Defender src/component/security-headers/class-sh-feature-policy.php
**Index Terms**: `security_headers`, `content_security_policy`, `permissions_policy`

```php
// ✅ GOOD: WP Defender Permissions-Policy (CSP) implementation
// Pattern from wp-defender/src/component/security-headers/class-sh-feature-policy.php
class WP_Defender_Permissions_Policy {
    
    public static $rule_slug = 'sh_feature_policy';
    
    /**
     * Check if Permissions-Policy should be applied
     */
    public function check() {
        $model = $this->get_model();
        
        if (!$model->sh_feature_policy) {
            return false;
        }
        
        if (isset($model->sh_feature_policy_mode) && !empty($model->sh_feature_policy_mode)) {
            return true;
        }
        
        $headers = $this->head_request(network_site_url(), self::$rule_slug);
        if (is_wp_error($headers)) {
            $this->log(sprintf('Self ping error: %s', $headers->get_error_message()), wd_internal_log());
            return false;
        }
        
        return isset($headers['feature-policy']);
    }
    
    /**
     * Get Permissions-Policy miscellaneous data
     */
    public function get_misc_data() {
        $model = $this->get_model();
        
        return array(
            'intro_text' => esc_html__(
                'The Permissions-Policy response header provides control over what browser features can be used when web pages are embedded in iframes.',
                'wpdef'
            ),
            'mode' => $model->sh_feature_policy_mode ?? 'self',
            'values' => $model->sh_feature_policy_urls ?? '',
        );
    }
    
    /**
     * Register Permissions-Policy hooks
     */
    public function add_hooks() {
        add_action('send_headers', array($this, 'append_header'));
    }
    
    /**
     * Append Permissions-Policy header
     */
    public function append_header() {
        if (headers_sent()) {
            return;
        }
        
        if (!$this->maybe_submit_header('Permissions-Policy', false)) {
            return;
        }
        
        $model = $this->get_model();
        
        if (true === $model->sh_feature_policy && 
            isset($model->sh_feature_policy_mode) && 
            in_array($model->sh_feature_policy_mode, array('self', 'allow', 'origins', 'none'), true)) {
            
            $headers = '';
            
            // Default list of features
            $features = apply_filters('wd_permissions_policy_directives', array(
                'accelerometer',
                'autoplay',
                'camera',
                'encrypted-media',
                'fullscreen',
                'geolocation',
                'gyroscope',
                'magnetometer',
                'microphone',
                'midi',
                'payment',
                'usb',
            ));
            
            switch ($model->sh_feature_policy_mode) {
                case 'self':
                    array_walk($features, function(&$value) {
                        $value .= '=(self)';
                    });
                    $headers = 'Permissions-Policy: ' . implode(', ', $features);
                    break;
                    
                case 'allow':
                    array_walk($features, function(&$value) {
                        $value .= '=*';
                    });
                    $headers = 'Permissions-Policy: ' . implode(', ', $features);
                    break;
                    
                case 'origins':
                    if (isset($model->sh_feature_policy_urls) && !empty($model->sh_feature_policy_urls)) {
                        $urls = explode(PHP_EOL, $model->sh_feature_policy_urls);
                        $urls = array_map('trim', $urls);
                        
                        // Wrap strings in quotes
                        array_walk($urls, function(&$x) {
                            $x = '"' . $x . '"';
                        });
                        
                        $urls = implode(' ', $urls);
                        array_walk($features, function(&$value) use ($urls) {
                            $value .= '=(' . $urls . ')';
                        });
                        
                        $headers = 'Permissions-Policy: ' . implode(', ', $features);
                    }
                    break;
                    
                case 'none':
                    array_walk($features, function(&$value) {
                        $value .= '=()';
                    });
                    $headers = 'Permissions-Policy: ' . implode(', ', $features);
                    break;
            }
            
            if (strlen($headers) > 0) {
                header(trim($headers));
            }
        }
    }
}
```

### **WP Defender Security Headers Controller**
**Pattern Source**: WP Defender src/controller/class-security-headers.php
**Index Terms**: `security_headers`, `header_controller`, `header_management`

```php
// ✅ GOOD: WP Defender security headers controller
// Pattern from wp-defender/src/controller/class-security-headers.php
class WP_Defender_Security_Headers_Controller {
    
    public $model;
    
    /**
     * Initialize security headers controller
     */
    public function __construct() {
        add_filter('wp_defender_advanced_tools_data', array($this, 'script_data'));
        $this->model = wd_di()->get(\WP_Defender\Model\Setting\Security_Headers::class);
        $this->init_headers();
        $this->register_routes();
    }
    
    /**
     * Provide data to frontend
     */
    public function script_data(array $data): array {
        $data['security_headers'] = $this->data_frontend();
        return $data;
    }
    
    /**
     * Save security headers settings
     */
    public function save_settings(Request $request) {
        $data = $request->get_data_by_model($this->model);
        $this->model->import($data);
        
        if ($this->model->validate()) {
            $this->model->save();
            Config_Hub_Helper::set_clear_active_flag();
            
            return new Response(
                true,
                array_merge(
                    array(
                        'message' => esc_html__('Your settings have been updated.', 'wpdef'),
                        'auto_close' => true,
                    ),
                    $this->data_frontend()
                )
            );
        }
        
        return new Response(
            false,
            array('message' => $this->model->get_formatted_errors())
        );
    }
    
    /**
     * Initialize all security headers
     */
    public function init_headers(): void {
        if (!defined('DOING_AJAX')) {
            // Refresh headers on admin pages
            if ((is_admin() || is_network_admin()) && 
                (('wdf-advanced-tools' === HTTP::get('page')) || 
                 ('wp-defender' === HTTP::get('page')))) {
                $this->model->refresh_headers();
            } elseif (defined('DOING_CRON')) {
                $this->model->refresh_headers();
            }
        }
        
        // Add hooks for all headers
        foreach ($this->model->get_headers() as $rule) {
            $rule->add_hooks();
        }
    }
    
    /**
     * Get data for frontend
     */
    public function data_frontend(): array {
        $model = $this->get_model();
        
        return array_merge(
            array(
                'model' => $model->export(),
                'misc' => $model->get_headers_as_array(true),
                'enabled' => $model->get_enabled_headers(3),
            ),
            $this->dump_routes_and_nonces()
        );
    }
    
    /**
     * Get headers by type
     */
    public function get_type_headers(): array {
        return $this->get_model()->get_headers_by_type();
    }
    
    /**
     * Convert to array for dashboard display
     */
    public function to_array() {
        $misc = $this->get_model()->refresh_headers();
        return array_slice($misc, 0, 3);
    }
    
    /**
     * Safe way to get cached model
     */
    private function get_model() {
        if (is_object($this->model)) {
            return $this->model;
        }
        
        return new \WP_Defender\Model\Setting\Security_Headers();
    }
}
```

---

## 🚨 **Error Handling & Logging** (`error_logging`)

### **PMPro Development Debug Logging System**
**Pattern Source**: PMPro services/ipnhandler.php, services/stripe-webhook.php, services/braintree-webhook.php
**Index Terms**: `error_logging`, `debug_logging`, `development_logging`

```php
// ✅ GOOD: PMPro conditional debug logging for development
// Pattern from paid-memberships-pro/services/ipnhandler.php
class PMPro_Debug_Logger {
    
    private $logstr = '';
    
    /**
     * Add message to debug log string
     */
    public function ipnlog($s) {
        $this->logstr .= "\t" . $s . "\n";
    }
    
    /**
     * Exit with conditional logging based on WP_DEBUG and constants
     */
    public function pmpro_ipnExit() {
        // Only log if there's content
        if ($this->logstr) {
            $this->logstr = "Logged On: " . date_i18n("m/d/Y H:i:s") . "\n" . $this->logstr . "\n-------------\n";
            
            // Echo for immediate debugging (only in development)
            if (defined('WP_DEBUG') && WP_DEBUG) {
                echo esc_html($this->logstr);
            }
            
            // Log based on debug constant configuration
            if (defined('PMPRO_IPN_DEBUG')) {
                if (PMPRO_IPN_DEBUG === false) {
                    // Explicitly disabled - don't log
                    return;
                } elseif (PMPRO_IPN_DEBUG === "log") {
                    // Log to file
                    $logfile = apply_filters('pmpro_ipn_logfile', dirname(__FILE__) . "/../logs/ipn.txt");
                    $this->write_to_log_file($logfile, $this->logstr);
                } elseif (is_email(PMPRO_IPN_DEBUG)) {
                    // Email to specified address (critical errors only)
                    wp_mail(PMPRO_IPN_DEBUG, get_option("blogname") . " IPN Log", nl2br(esc_html($this->logstr)));
                } else {
                    // Email to admin (critical errors only)
                    wp_mail(get_option("admin_email"), get_option("blogname") . " IPN Log", nl2br(esc_html($this->logstr)));
                }
            }
        }
        
        exit;
    }
    
    /**
     * Secure file writing with proper error handling
     */
    private function write_to_log_file($logfile, $content) {
        // Ensure directory exists
        $log_dir = dirname($logfile);
        if (!is_dir($log_dir)) {
            wp_mkdir_p($log_dir);
        }
        
        // Write to file with error handling
        $loghandle = fopen($logfile, "a+");
        if ($loghandle) {
            fwrite($loghandle, $content);
            fclose($loghandle);
        } else {
            // Fallback to error_log if file writing fails
            error_log("PMPro: Failed to write to log file: " . $logfile);
            error_log("PMPro Log Content: " . $content);
        }
    }
}

// ✅ GOOD: PMPro Stripe webhook debug logging
// Pattern from paid-memberships-pro/services/stripe-webhook.php
function pmpro_stripeWebhookExit() {
    global $logstr;
    
    do_action('pmpro_stripe_webhook_before_exit');
    
    if ($logstr) {
        $logstr = "Logged On: " . date_i18n("m/d/Y H:i:s") . "\n" . $logstr . "\n-------------\n";
        
        // Echo for development debugging
        if (defined('WP_DEBUG') && WP_DEBUG) {
            echo esc_html($logstr);
        }
        
        // Conditional logging based on debug constant
        if (defined('PMPRO_STRIPE_WEBHOOK_DEBUG') && PMPRO_STRIPE_WEBHOOK_DEBUG === "log") {
            // File logging
            $logfile = apply_filters('pmpro_stripe_webhook_logfile', dirname(__FILE__) . "/../logs/stripe-webhook.txt");
            $loghandle = fopen($logfile, "a+");
            if ($loghandle) {
                fwrite($loghandle, $logstr);
                fclose($loghandle);
            }
        } elseif (defined('PMPRO_STRIPE_WEBHOOK_DEBUG') && false !== PMPRO_STRIPE_WEBHOOK_DEBUG) {
            // Email logging for critical errors
            if (strpos(PMPRO_STRIPE_WEBHOOK_DEBUG, "@")) {
                $log_email = PMPRO_STRIPE_WEBHOOK_DEBUG;
            } else {
                $log_email = get_option("admin_email");
            }
            
            wp_mail($log_email, get_option("blogname") . " Stripe Webhook Log", nl2br(esc_html($logstr)));
        }
    }
    
    exit;
}

// ✅ GOOD: PMPro critical error logging with fallback
// Pattern from paid-memberships-pro/classes/gateways/class.pmprogateway_paypalexpress.php
function pmpro_log_critical_error($method_name, $error_message, $context = array()) {
    // Always log critical errors to PHP error log
    error_log("PMPro Critical Error in $method_name: $error_message");
    
    // Add context if provided
    if (!empty($context)) {
        error_log("PMPro Error Context: " . wp_json_encode($context));
    }
    
    // Only die in development or if WP_DEBUG is enabled
    if (defined('WP_DEBUG') && WP_DEBUG) {
        die(esc_html("Unable to complete $method_name request: $error_message"));
    }
    
    // In production, return error gracefully
    return new WP_Error('pmpro_critical_error', $error_message, $context);
}
```

### **PMPro User-Friendly Error Handling**
**Pattern Source**: PMPro includes/functions.php, includes/login.php, js/pmpro-stripe.js
**Index Terms**: `error_logging`, `user_error_handling`, `graceful_errors`

```php
// ✅ GOOD: PMPro user-friendly error handling with logging
// Pattern from paid-memberships-pro/includes/functions.php
class PMPro_Error_Handler {
    
    /**
     * Set user-friendly error message with optional logging
     */
    public function pmpro_setMessage($message, $type, $force = false) {
        global $pmpro_msg, $pmpro_msgt;
        
        // Log error messages for debugging
        if ($type === 'pmpro_error' && defined('WP_DEBUG') && WP_DEBUG) {
            error_log("PMPro Error Message: " . $message);
        }
        
        // Only show first message unless forced
        if ($force || empty($pmpro_msg)) {
            $pmpro_msg = apply_filters('pmpro_set_message', $message, $type);
            $pmpro_msgt = $type;
        }
    }
    
    /**
     * Display user-friendly error message
     */
    public function pmpro_showMessage() {
        global $pmpro_msg, $pmpro_msgt;
        
        $allowed_html = array(
            'a' => array(
                'href' => array(),
                'target' => array(),
                'title' => array(),
            ),
            'em' => array(),
            'p' => array(),
            'span' => array('class' => array()),
            'strong' => array(),
            'ul' => array(),
            'li' => array(),
        );
        
        if (!empty($pmpro_msg)) {
            ?>
            <div role="alert" id="pmpro_message" class="<?php echo esc_attr(pmpro_get_element_class('pmpro_message ' . $pmpro_msgt, $pmpro_msgt)); ?>">
                <p><?php echo wp_kses($pmpro_msg, $allowed_html); ?></p>
            </div>
            <?php
        }
    }
    
    /**
     * Handle login errors with logging and user-friendly messages
     */
    public function pmpro_authenticate_username_password($user, $username, $password) {
        // Only work when PMPro login form is used
        if (empty($_REQUEST['pmpro_login_form_used'])) {
            return $user;
        }
        
        // Already logged in
        if (is_a($user, 'WP_User')) {
            return $user;
        }
        
        // Handle empty password error
        if (!empty($username) && empty($password)) {
            $error = new WP_Error('empty_password', 
                wp_kses(__('<strong>Error:</strong> The password field is empty.', 'paid-memberships-pro'), 
                array('strong' => array())));
            
            // Log authentication attempt
            if (defined('WP_DEBUG') && WP_DEBUG) {
                error_log("PMPro Login Error: Empty password for user: " . sanitize_text_field($username));
            }
            
            return $error;
        }
        
        // Handle other authentication errors
        $referrer = wp_get_referer();
        if (!empty($referrer) && is_wp_error($user)) {
            $error_code = $user->get_error_code();
            
            // Log authentication failure
            if (defined('WP_DEBUG') && WP_DEBUG) {
                error_log("PMPro Login Error: " . $error_code . " for user: " . sanitize_text_field($username));
            }
            
            if ($error_code) {
                $error_args = array(
                    'action' => urlencode($error_code),
                    'username' => sanitize_text_field($username)
                );
                wp_redirect(add_query_arg($error_args, pmpro_login_url()));
            } else {
                wp_redirect(pmpro_login_url());
            }
        }
        
        return $user;
    }
}

// ✅ GOOD: PMPro JavaScript error handling
// Pattern from paid-memberships-pro/js/pmpro-stripe.js
function pmpro_stripeResponseHandler(response) {
    var form = $('#pmpro_form, .pmpro_form');
    
    if (response.error) {
        // Log error for debugging (only in development)
        if (typeof console !== 'undefined' && console.log) {
            console.log('PMPro Stripe Error:', response.error);
        }
        
        // Re-enable submit button
        $('.pmpro_btn-submit-checkout,.pmpro_btn-submit').removeAttr('disabled');
        
        // Hide processing message
        $('#pmpro_processing_message').css('visibility', 'hidden');
        
        // Show user-friendly error message
        $('#pmpro_message').text(response.error.message)
            .addClass('pmpro_error')
            .removeClass('pmpro_alert pmpro_success')
            .attr('role', 'alert')
            .show();
        
        $('#pmpro_message_bottom').text(response.error.message)
            .addClass('pmpro_error')
            .removeClass('pmpro_alert pmpro_success')
            .attr('role', 'alert')
            .show();
    }
}
```

### **WP Defender Development Debug Logging System**
**Pattern Source**: WP Defender src/component/class-quarantine.php, framework/base/class-component.php
**Index Terms**: `error_logging`, `debug_logging`, `wp_defender_logging`

```php
// ✅ GOOD: WP Defender comprehensive debug logging system
// Pattern from wp-defender/framework/base/class-component.php
class WP_Defender_Logger {
    
    private $internal_logging = array();
    
    /**
     * Log messages with category and conditional file writing
     */
    protected function log($message, $category = ''): void {
        global $wp_filesystem;
        
        // Initialize WordPress filesystem
        if (empty($wp_filesystem)) {
            require_once ABSPATH . '/wp-admin/includes/file.php';
            WP_Filesystem();
        }
        
        // Convert complex data to JSON
        if (!is_string($message) || is_array($message) || is_object($message)) {
            $message = wp_json_encode($message, JSON_PRETTY_PRINT);
        }
        
        // Store in internal logging array
        $this->internal_logging[] = wp_date('Y-m-d H:i:s') . ' ' . $message;
        
        // Output to CLI if running from command line
        if ('cli' === PHP_SAPI && defined('WP_DEBUG') && WP_DEBUG) {
            echo $message . PHP_EOL;
        }
        
        // Format message with timestamp
        $message = '[' . wp_date('c') . '] ' . $message . PHP_EOL;
        
        // Write to file if logging method exists and category is provided
        if ($this->has_method('get_log_path') && !empty($category)) {
            // Ensure .log extension
            if (0 === preg_match('/\.log$/', $category)) {
                $category .= '.log';
            }
            
            $file_path = $this->get_log_path($category);
            $dir_name = pathinfo($file_path, PATHINFO_DIRNAME);
            
            // Get existing content if file exists
            if ($wp_filesystem->exists($file_path)) {
                $message = $wp_filesystem->get_contents($file_path) . $message;
            } elseif (!is_dir($dir_name)) {
                wp_mkdir_p($dir_name);
            }
            
            // Write to file if directory is writable
            if ($wp_filesystem->is_writable($dir_name)) {
                $wp_filesystem->put_contents($file_path, $message);
            }
        }
    }
    
    /**
     * Advanced logging with backtrace for critical errors
     */
    private function log_wrapper(
        $message,
        string $custom_trace_title = '',
        bool $in_depth_debug = false,
        int $in_depth_limit = 1,
        string $category = 'quarantine'
    ): void {
        // Only log detailed traces in development
        if (defined('WP_DEBUG') && WP_DEBUG) {
            $this->log('Backtrace Summary:', $category);
            $this->log(wp_debug_backtrace_summary(null, 1, false), $category);
            
            $this->log('Custom Trace:', $category);
            
            if (!empty($custom_trace_title)) {
                $this->log($custom_trace_title, $category);
            }
            
            $this->log($message, $category);
            
            if (true === $in_depth_debug) {
                $this->log('Detailed Debug:', $category);
                $this->log(debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT, $in_depth_limit), $category);
            }
        } else {
            // In production, only log the message without traces
            $this->log($message, $category);
        }
    }
}
```

### **WP Defender Error Handling & API Logging**
**Pattern Source**: WP Defender extra/hub-connector/inc/class-api.php, src/class-central.php
**Index Terms**: `error_logging`, `api_error_handling`, `production_logging`

```php
// ✅ GOOD: WP Defender API error handling with conditional logging
// Pattern from wp-defender/extra/hub-connector/inc/class-api.php
class WP_Defender_API_Error_Handler {
    
    /**
     * Handle API errors with detailed logging in debug mode
     */
    private function handle_api_error($response, $error_code) {
        $url = '(unknown URL)';
        if (is_array($response) && isset($response['request_url'])) {
            $url = $response['request_url'];
        }
        
        $error = array(
            'code' => $error_code,
            'message' => ''
        );
        
        if (empty($error['message'])) {
            $error['message'] = sprintf(
                'HTTP Error: %s "%s"',
                $error_code,
                wp_remote_retrieve_response_message($response)
            );
        }
        
        // Detailed logging only in debug mode
        if (defined('WPMUDEV_API_DEBUG') && WPMUDEV_API_DEBUG) {
            $trace = debug_backtrace();
            $caller = array();
            $last_line = '';
            
            foreach ($trace as $level => $item) {
                if (!isset($item['class'])) $item['class'] = '';
                if (!isset($item['type'])) $item['type'] = '';
                if (!isset($item['function'])) $item['function'] = '<function>';
                if (!isset($item['line'])) $item['line'] = '?';
                
                if ($level > 0) {
                    $caller[] = $item['class'] . $item['type'] . $item['function'] . ':' . $last_line;
                }
                $last_line = $item['line'];
            }
            
            $caller_dump = "\n\t# " . implode("\n\t# ", $caller);
            
            if (is_array($response) && isset($response['request_url'])) {
                $caller_dump = "\n\tURL: " . $response['request_url'] . $caller_dump;
            }
            
            // Log to PHP error log
            error_log(
                sprintf(
                    '[WPMUDEV API Error] %s | %s (%s [%s]) %s',
                    WPMUDEV_HUB_CONNECTOR_VERSION,
                    $error['message'],
                    $url,
                    $error_code,
                    $caller_dump
                ),
                0
            );
        }
        
        // Handle authentication errors
        if (401 == $error_code && !defined('WPMUDEV_APIKEY') && !defined('WPMUDEV_OVERRIDE_LOGOUT')) {
            $this->set_api_key('');
        }
        
        return $error;
    }
    
    /**
     * Conditional logging based on debug settings
     */
    private function maybe_log($data) {
        if (defined('WPMUDEV_API_DEBUG') && WPMUDEV_API_DEBUG) {
            error_log($data);
        }
    }
}

// ✅ GOOD: WP Defender Central controller error handling
// Pattern from wp-defender/src/class-central.php
class WP_Defender_Central_Error_Handler {
    
    public const INTERNAL_LOG = 'internal.log';
    
    /**
     * Handle AJAX routing with proper error handling
     */
    public function routing() {
        $route = HTTP::get('route', false);
        $nonce = HTTP::get('_def_nonce', false);
        
        if (empty($route) || empty($nonce)) {
            exit;
        }
        
        $this->check_opcache();
        $route = wp_unslash($route);
        
        // Handle authentication errors
        if (!is_user_logged_in() && $this->is_private_access($route)) {
            $data = array(
                'message' => esc_html__('Your session expired. Please login to continue.', 'wpdef'),
                'type_notice' => 'session_out',
            );
            
            if ($this->is_redirect($route)) {
                $data['redirect'] = wp_login_url(wp_get_referer());
            }
            
            wp_send_json_error($data);
        }
        
        // Handle nonce validation
        if (!wp_verify_nonce($nonce, $route)) {
            wp_send_json_error(array(
                'message' => esc_html__('Invalid API request.', 'wpdef'),
                'type_notice' => 'invalid_request',
            ));
        }
        
        $key = sprintf('controller.%s', $route);
        
        try {
            $package = wd_di()->get($key);
            [$class, $method, $is_private] = $package;
            
            if ($is_private && !$this->check_permission()) {
                wp_send_json_error(array(
                    'message' => esc_html__('You shall not pass.', 'wpdef'),
                    'type_notice' => 'not_allowed',
                ));
            }
            
            if ($is_private) {
                if (!wp_next_scheduled('defender_hub_sync')) {
                    wp_schedule_single_event(time(), 'defender_hub_sync');
                }
            }
            
            $this->execute_intention($class, $method);
        } catch (Exception $e) {
            // Log exceptions to internal log
            $this->log($e->getMessage(), self::INTERNAL_LOG);
            
            // In debug mode, also log to PHP error log
            if (defined('WP_DEBUG') && WP_DEBUG) {
                error_log('WP Defender Exception: ' . $e->getMessage());
            }
        }
    }
    
    /**
     * Execute method with error handling
     */
    private function execute_intention($class_name, $method) {
        $object = wd_di()->get($class_name);
        
        if (is_object($object)) {
            $request = new Request();
            $_POST = $request->get_data();
            
            return $object->$method($request);
        } else {
            $error_msg = sprintf('class not found when executing: %s %s', $class_name, $method);
            $this->log($error_msg, self::INTERNAL_LOG);
            
            // Log to PHP error log in debug mode
            if (defined('WP_DEBUG') && WP_DEBUG) {
                error_log('WP Defender Error: ' . $error_msg);
            }
        }
    }
}
```

### **WP Defender Deprecation and Development Logging**
**Pattern Source**: WP Defender src/functions.php, src/component/security-tweaks/class-hide-error.php
**Index Terms**: `error_logging`, `deprecation_logging`, `development_errors`

```php
// ✅ GOOD: WP Defender deprecation handling with conditional logging
// Pattern from wp-defender/src/functions.php
function defender_deprecated_function(string $function_name, string $version, string $replacement = ''): void {
    // Only trigger errors in debug mode
    if (WP_DEBUG && apply_filters('defender_deprecated_function_trigger_error', false)) {
        if (wp_doing_ajax() || defender_is_rest_api_request()) {
            do_action('deprecated_function_run', $function_name, $replacement, $version);
            
            $log_string = "Function {$function_name} is deprecated since version {$version}!";
            $log_string .= $replacement ? " Use {$replacement} instead." : '';
            
            // Log to error log
            error_log('WP Defender Deprecation: ' . $log_string);
            
            // Die only in debug mode
            wp_die(esc_html($log_string));
        } else {
            _deprecated_function(esc_html($function_name), esc_html($version), esc_html($replacement));
        }
    }
}

// ✅ GOOD: WP Defender debug mode management
// Pattern from wp-defender/src/component/security-tweaks/class-hide-error.php
class WP_Defender_Debug_Manager {
    
    /**
     * Check if debug mode should be enabled
     */
    public function check(): bool {
        $debug = defined('WP_DEBUG') && WP_DEBUG;
        return !$debug; // Returns true if debug is disabled (secure)
    }
    
    /**
     * Set debug mode with proper error handling
     */
    private function set_debug_data(bool $value) {
        $sec_tweak_component = new Security_Tweak_Component();
        $obj_file = $sec_tweak_component->file();
        
        if (false === $obj_file) {
            return new WP_Error(
                'defender_file_not_writable',
                esc_html__('The file wp-config.php is not writable', 'wpdef')
            );
        } elseif (is_numeric($obj_file)) {
            return new WP_Error(
                'defender_file_not_writable',
                $sec_tweak_component->show_hosting_notice('debug mode')
            );
        }
        
        $value = $value ? 'true' : 'false';
        $pattern = "/^define\(\s*['|\"]WP_DEBUG['|\"],(.*)\)/";
        $debug_type = 'WP_DEBUG';
        $debug_line = "define( '{$debug_type}', {$value} ); // Added by Defender";
        
        $lines = array();
        $line_found = false;
        
        foreach ($obj_file as $line) {
            if (!$line_found && preg_match($pattern, $line)) {
                // Check if this is a revert request and changes weren't made by Defender
                if ('true' === $value && !preg_match(
                    "/^define\(\s*['|\"]{$debug_type}['|\"],(.*)\);\s*\/\/\s*Added\s*by\s*Defender.?.*/i",
                    $line
                )) {
                    return new WP_Error(
                        'defender_file_not_writable',
                        $sec_tweak_component->show_hosting_notice_with_code($debug_type, $debug_line)
                    );
                }
                
                $lines[] = $debug_line;
                $line_found = true;
                continue;
            }
            
            $lines[] = $line;
        }
        
        // Write changes back to file
        return $sec_tweak_component->write($lines);
    }
}

// ✅ GOOD: WP Defender critical error handling
// Pattern from wp-defender/src/component/class-error-code.php
class WP_Defender_Error_Codes {
    
    public const NOT_WRITEABLE = 1;
    public const WPDEBUG_NOT_FOUND = 2;
    public const UNKNOWN_WPCONFIG = 3;
    public const IS_EMPTY = 4;
    public const VALIDATE = 5;
    public const SQL_ERROR = 6;
    public const DB_ERROR = 7;
    public const INVALID = 8;
    public const SCAN_ERROR = 9;
    public const API_ERROR = 10;
    public const DECRYPT_ERROR = 11;
    public const ENCRYPT_ERROR = 12;
    
    /**
     * Handle critical errors with proper logging
     */
    public static function handle_critical_error($error_code, $message, $context = array()) {
        // Always log critical errors
        error_log("WP Defender Critical Error [{$error_code}]: {$message}");
        
        // Add context in debug mode
        if (defined('WP_DEBUG') && WP_DEBUG && !empty($context)) {
            error_log("WP Defender Error Context: " . wp_json_encode($context));
        }
        
        // Return WP_Error for graceful handling
        return new WP_Error(
            'defender_critical_error',
            $message,
            array(
                'error_code' => $error_code,
                'context' => $context
            )
        );
    }
}
```

### **Development-Only Console Logging Patterns**
**Pattern Source**: Combined best practices from PMPro and WP Defender
**Index Terms**: `error_logging`, `console_logging`, `development_only`

```php
// ✅ GOOD: Development-only console and debug logging
class Plugin_Development_Logger {
    
    /**
     * Log to browser console (development only)
     */
    public function console_log($data, $context = '') {
        if (defined('WP_DEBUG') && WP_DEBUG && !wp_doing_ajax()) {
            $output = $data;
            if (is_array($data) || is_object($data)) {
                $output = json_encode($data);
            }
            
            $context_str = !empty($context) ? "[{$context}] " : '';
            
            echo '<script>';
            echo 'console.log("' . $context_str . 'Plugin Debug: ' . addslashes($output) . '");';
            echo '</script>';
        }
    }
    
    /**
     * Debug logging only when WP_DEBUG is enabled
     */
    public function debug_log($message, $category = 'plugin') {
        if (defined('WP_DEBUG') && WP_DEBUG) {
            $timestamp = wp_date('Y-m-d H:i:s');
            $log_message = "[{$timestamp}] [{$category}] {$message}";
            
            error_log($log_message);
        }
    }
    
    /**
     * Critical error logging (always logs, regardless of debug mode)
     */
    public function critical_error($message, $context = array()) {
        $timestamp = wp_date('Y-m-d H:i:s');
        $log_message = "[{$timestamp}] [CRITICAL] {$message}";
        
        // Always log critical errors
        error_log($log_message);
        
        // Add context in debug mode
        if (defined('WP_DEBUG') && WP_DEBUG && !empty($context)) {
            error_log("[{$timestamp}] [CRITICAL_CONTEXT] " . wp_json_encode($context));
        }
        
        // Email admin for critical errors in production
        if (!defined('WP_DEBUG') || !WP_DEBUG) {
            wp_mail(
                get_option('admin_email'),
                get_option('blogname') . ' Critical Error',
                "A critical error occurred in your plugin:\n\n{$message}\n\nTime: {$timestamp}"
            );
        }
    }
    
    /**
     * Performance logging for development
     */
    public function performance_log($start_time, $operation, $memory_start = null) {
        if (defined('WP_DEBUG') && WP_DEBUG) {
            $end_time = microtime(true);
            $execution_time = ($end_time - $start_time) * 1000; // Convert to milliseconds
            
            $log_message = "Performance: {$operation} took {$execution_time}ms";
            
            if ($memory_start !== null) {
                $memory_end = memory_get_usage(true);
                $memory_used = ($memory_end - $memory_start) / 1024 / 1024; // Convert to MB
                $log_message .= ", Memory used: {$memory_used}MB";
            }
            
            error_log($log_message);
        }
    }
}

// Usage examples:
$logger = new Plugin_Development_Logger();

// Console logging (development only)
$logger->console_log(['user_id' => 123, 'action' => 'login'], 'AUTH');

// Debug logging (development only)
$logger->debug_log('User authentication successful', 'AUTH');

// Critical error logging (always logs)
$logger->critical_error('Database connection failed', ['host' => 'localhost', 'error' => 'timeout']);

// Performance logging (development only)
$start_time = microtime(true);
$memory_start = memory_get_usage(true);
// ... your code here ...
$logger->performance_log($start_time, 'User Registration Process', $memory_start);
```

---

## 🔑 **Login Security & Mask Protection** (`login_security`)

### **PMPro Comprehensive Login Security**
**Pattern Source**: PMPro includes/login.php, adminpages/securitysettings.php
**Index Terms**: `login_security`, `password_security`, `two_factor_authentication`

```php
// ✅ GOOD: PMPro password security implementation
// Pattern from paid-memberships-pro/includes/login.php
function pmpro_password_strength() {
    $password = $_POST['password'];
    $strength = 0;
    $strength += preg_match('/[a-z]/', $password) ? 1 : 0;
    $strength += preg_match('/[A-Z]/', $password) ? 1 : 0;
    $strength += preg_match('/[0-9]/', $password) ? 1 : 0;
    $strength += preg_match('/[^a-zA-Z0-9]/', $password) ? 1 : 0;
    return $strength;
}

// ✅ GOOD: PMPro two-factor authentication implementation
// Pattern from paid-memberships-pro/adminpages/securitysettings.php
if ( !empty( $_REQUEST['savesettings'] ) && ( empty( $_REQUEST[ 'pmpro_securitysettings_nonce' ] ) 
    || !check_admin_referer( 'savesettings', 'pmpro_securitysettings_nonce' ) ) ) {
    $msg = -1;
    $msgt = __( "Are you sure you want to do that? Try again.", 'paid-memberships-pro' );
    unset( $_REQUEST[ 'savesettings' ] );
}

// Save settings only after security checks pass
if( !empty( $_REQUEST['savesettings'] ) ) {
    pmpro_setOption( "spamprotection", intval( $_POST['spamprotection'] ) );
    
    if ( isset( $_POST['use_ssl'] ) ) {
        pmpro_setOption( "use_ssl", intval( $_POST['use_ssl'] ) );
    }
    
    do_action( 'pmpro_save_security_settings' );
    
    $msg = true;
    $msgt = __("Your security settings have been updated.", 'paid-memberships-pro' );
}
```

### **WP Defender Password Security**
**Pattern Source**: WP Defender src/component/security-tweaks/class-strong-password.php
**Index Terms**: `login_security`, `password_security`, `password_strength`

```php
// ✅ GOOD: WP Defender password strength checking
// Pattern from wp-defender/src/component/security-tweaks/class-strong-password.php
class WP_Defender_Password_Security {
    
    /**
     * Check password strength
     */
    public function check_password_strength($password) {
        $strength = 0;
        $strength += preg_match('/[a-z]/', $password) ? 1 : 0;
        $strength += preg_match('/[A-Z]/', $password) ? 1 : 0;
        $strength += preg_match('/[0-9]/', $password) ? 1 : 0;
        $strength += preg_match('/[^a-zA-Z0-9]/', $password) ? 1 : 0;
        return $strength;
    }
}
```

### **PMPro Two-Factor Authentication**
**Pattern Source**: PMPro includes/two-factor.php, adminpages/securitysettings.php
**Index Terms**: `login_security`, `two_factor_authentication`, `otp_authentication`

```php
// ✅ GOOD: PMPro OTP authentication implementation
// Pattern from paid-memberships-pro/includes/two-factor.php
function pmpro_otp_generate_code() {
    $length = 6;
    $code = '';
    for ($i = 0; $i < $length; $i++) {
        $code .= mt_rand(0, 9);
    }
    return $code;
}

// ✅ GOOD: PMPro OTP authentication with session tracking
// Pattern from paid-memberships-pro/includes/two-factor.php
function pmpro_otp_is_validated() {
    // Check if the user has already been validated.
    $otp_validated = pmpro_get_session_var( 'pmpro_otp_validated' );
    if ( ! empty( $otp_validated ) ) {
        return true;
    }

    // Get the OTP private key.
    $otp_privatekey = get_option( 'pmpro_otp_privatekey' );

    // Verify the OTP response
    if ( isset( $_POST["pmpro_otp_code"] ) ) {
        require_once(PMPRO_DIR . '/includes/lib/otp.php' );
        $otp = new pmpro_OTP( $otp_privatekey );
        $resp      = $otp->verifyResponse( pmpro_get_ip(), $_POST["pmpro_otp_code"] );
        
        $otp_valid  = $resp->success;
        $otp_errors = $resp->errorCodes;
    } else {
        return __( 'OTP not submitted.', 'paid-memberships-pro' );
    }

    if ( $otp_valid ) {
        pmpro_set_session_var( 'pmpro_otp_validated', true );
        return true;
    } else {
        return $otp_errors;
    }
}

// ✅ GOOD: PMPro OTP authentication with email notification
// Pattern from paid-memberships-pro/includes/two-factor.php
function pmpro_otp_send_email($user_id) {
    $otp = pmpro_otp_generate_code();
    $otp_url = add_query_arg( array(
        'pmpro_otp' => wp_create_nonce( 'pmpro_otp' ),
        'user_id' => $user_id,
        'otp' => $otp,
    ), pmpro_login_url() );
    
    $message = sprintf(
        esc_html__( 'Your One-Time Password (OTP) for %s is: %s', 'paid-memberships-pro' ),
        get_option( 'blogname' ),
        $otp
    );
    
    wp_mail( $user_id, get_option( 'blogname' ) . ' - OTP', $message );
}
```

### **WP Defender Two-Factor Authentication**
**Pattern Source**: WP Defender src/component/security-tweaks/class-two-factor.php
**Index Terms**: `login_security`, `two_factor_authentication`, `otp_authentication`

```php
// ✅ GOOD: WP Defender OTP authentication implementation
// Pattern from wp-defender/src/component/security-tweaks/class-two-factor.php
class WP_Defender_OTP_Authentication {
    
    /**
     * Generate OTP code
     */
    public function generate_otp_code() {
        $length = 6;
        $code = '';
        for ($i = 0; $i < $length; $i++) {
            $code .= mt_rand(0, 9);
        }
        return $code;
    }
    
    /**
     * Check OTP code
     */
    public function check_otp_code($user_id, $otp) {
        $otp_code = get_user_meta( $user_id, 'wd_2fa_otp_code', true );
        return $otp_code === $otp;
    }
    
    /**
     * Send OTP via email
     */
    public function send_otp_email($user_id) {
        $otp = $this->generate_otp_code();
        $otp_url = add_query_arg( array(
            'pmpro_otp' => wp_create_nonce( 'pmpro_otp' ),
            'user_id' => $user_id,
            'otp' => $otp,
        ), pmpro_login_url() );
        
        $message = sprintf(
            esc_html__( 'Your One-Time Password (OTP) for %s is: %s', 'paid-memberships-pro' ),
            get_option( 'blogname' ),
            $otp
        );
        
        wp_mail( $user_id, get_option( 'blogname' ) . ' - OTP', $message );
    }
}
```

### **PMPro Login Security Pattern**
**Pattern Source**: PMPro includes/login.php, adminpages/securitysettings.php
**Index Terms**: `login_security`, `login_attempts`, `login_lockout`

```php
// ✅ GOOD: PMPro login attempt tracking with time windows
// Pattern from paid-memberships-pro/includes/login.php
function pmpro_login_attempt_tracking() {
    $username = $_POST['log'];
    $password = $_POST['pwd'];
    
    // Check if login form is submitted
    if ( !empty( $_POST['pmpro_login_form_used'] ) && !empty( $_POST['pmpro_login_form_submitted'] ) ) {
        $user = get_user_by( 'login', $username );
        if ( $user ) {
            $ip = pmpro_get_ip();
            $model = Lockout_Ip::get( $ip );
            $model = $this->record_fail_attempt( $ip, $model );
            
            // Log the event
            $this->log_event( $ip, $username, self::SCENARIO_LOGIN_FAIL );
            
            // Check if IP should be locked based on attempt window
            $ls = $this->model;
            $window = strtotime( '-' . $ls->timeframe . 'seconds' );
            
            $model = $this->check_meta_data( $model );
            // Get the latest attempts, limited by attempt count
            $checks = array_slice( $model->meta['login'], $ls->attempt * -1 );
            
            if ( count( $checks ) < $ls->attempt ) {
                // Log failed login attempt
                $this->log_failed_login( $username, $ip );
                return new WP_Error( 'pmpro_login_failed', esc_html__( 'Invalid username or password.', 'paid-memberships-pro' ) );
            }
            
            // Check if attempts are within the time window
            $check = min( $checks );
            if ( $check >= $window ) {
                // Log failed login attempt
                $this->log_failed_login( $username, $ip );
                return new WP_Error( 'pmpro_login_failed', esc_html__( 'Invalid username or password.', 'paid-memberships-pro' ) );
            }
        }
    }
}

// ✅ GOOD: WP Defender attempt counter with transient
private function check_attempt_counter_by( $blocked_ip ): bool {
    $blocked_ip    = $this->check_ip_by_remote_addr( $blocked_ip );
    $request_count = get_transient( $blocked_ip );
    $disabled      = false;
    
    if ( false === $request_count ) {
        set_transient( $blocked_ip, 1, Unlock_Me::EXPIRED_COUNTER_TIME );
    } elseif ( (int) $request_count >= Unlock_Me::get_attempt_limit() ) {
        $disabled = true;
    } else {
        ++$request_count;
        set_transient( $blocked_ip, $request_count, Unlock_Me::EXPIRED_COUNTER_TIME );
    }
    
    return $disabled;
}

// ✅ GOOD: WP Defender 2FA attempt limiting
public function get_attempt_limit(): int {
    return (int) apply_filters( 'wd_2fa_attempt_limit', self::ATTEMPT_LIMIT );
}

// ✅ GOOD: WP Defender 2FA lockout with time limits
if ( apply_filters( 'wd_2fa_enable_attempts', true ) && $login_settings->enabled ) {
    $line = get_user_meta( $user_id, 'wd_2fa_attempt_' . $slug, true );
    
    if ( empty( $line ) ) {
        $count      = $this->get_attempt_limit();
        $start_time = time();
    } else {
        [ $count, $start_time ] = explode( '::', $line );
    }
    
    $end_time   = time();
    $time_limit = $this->get_time_limit();
    
    // Reset attempts if time limit exceeded
    if ( $end_time - $start_time >= $time_limit ) {
        delete_user_meta( $user_id, 'wd_2fa_attempt_' . $slug );
        $count      = $this->get_attempt_limit();
        $start_time = $end_time;
    }
    
    $count = (int) $count - 1;
    if ( 1 > $count ) {
        $message = sprintf(
            esc_html__( 'Lockout occurred: Too many failed 2fa attempts for %s method.', 'wpdef' ),
            $slug
        );
        do_action( 'wd_2fa_lockout', $user_id, $message, $time_limit );
        delete_user_meta( $user_id, 'wd_2fa_attempt_' . $slug );
        wp_safe_redirect( home_url() );
        exit;
    }
}
```

### **PMPro Login Lockout Pattern**
**Pattern Source**: PMPro includes/login.php, adminpages/securitysettings.php
**Index Terms**: `login_security`, `login_attempts`, `login_lockout`

```php
// ✅ GOOD: PMPro login attempt tracking with time windows
// Pattern from paid-memberships-pro/includes/login.php
function pmpro_login_attempt_tracking() {
    $username = $_POST['log'];
    $password = $_POST['pwd'];
    
    // Check if login form is submitted
    if ( !empty( $_POST['pmpro_login_form_used'] ) && !empty( $_POST['pmpro_login_form_submitted'] ) ) {
        $user = get_user_by( 'login', $username );
        if ( $user ) {
            $ip = pmpro_get_ip();
            $model = Lockout_Ip::get( $ip );
            $model = $this->record_fail_attempt( $ip, $model );
            
            // Log the event
            $this->log_event( $ip, $username, self::SCENARIO_LOGIN_FAIL );
            
            // Check if IP should be locked based on attempt window
            $ls = $this->model;
            $window = strtotime( '-' . $ls->timeframe . 'seconds' );
            
            $model = $this->check_meta_data( $model );
            // Get the latest attempts, limited by attempt count
            $checks = array_slice( $model->meta['login'], $ls->attempt * -1 );
            
            if ( count( $checks ) < $ls->attempt ) {
                // Log failed login attempt
                $this->log_failed_login( $username, $ip );
                return new WP_Error( 'pmpro_login_failed', esc_html__( 'Invalid username or password.', 'paid-memberships-pro' ) );
            }
            
            // Check if attempts are within the time window
            $check = min( $checks );
            if ( $check >= $window ) {
                // Log failed login attempt
                $this->log_failed_login( $username, $ip );
                return new WP_Error( 'pmpro_login_failed', esc_html__( 'Invalid username or password.', 'paid-memberships-pro' ) );
            }
        }
    }
}

// ✅ GOOD: WP Defender attempt counter with transient
private function check_attempt_counter_by( $blocked_ip ): bool {
    $blocked_ip    = $this->check_ip_by_remote_addr( $blocked_ip );
    $request_count = get_transient( $blocked_ip );
    $disabled      = false;
    
    if ( false === $request_count ) {
        set_transient( $blocked_ip, 1, Unlock_Me::EXPIRED_COUNTER_TIME );
    } elseif ( (int) $request_count >= Unlock_Me::get_attempt_limit() ) {
        $disabled = true;
    } else {
        ++$request_count;
        set_transient( $blocked_ip, $request_count, Unlock_Me::EXPIRED_COUNTER_TIME );
    }
    
    return $disabled;
}

// ✅ GOOD: WP Defender 2FA attempt limiting
public function get_attempt_limit(): int {
    return (int) apply_filters( 'wd_2fa_attempt_limit', self::ATTEMPT_LIMIT );
}

// ✅ GOOD: WP Defender 2FA lockout with time limits
if ( apply_filters( 'wd_2fa_enable_attempts', true ) && $login_settings->enabled ) {
    $line = get_user_meta( $user_id, 'wd_2fa_attempt_' . $slug, true );
    
    if ( empty( $line ) ) {
        $count      = $this->get_attempt_limit();
        $start_time = time();
    } else {
        [ $count, $start_time ] = explode( '::', $line );
    }
    
    $end_time   = time();
    $time_limit = $this->get_time_limit();
    
    // Reset attempts if time limit exceeded
    if ( $end_time - $start_time >= $time_limit ) {
        delete_user_meta( $user_id, 'wd_2fa_attempt_' . $slug );
        $count      = $this->get_attempt_limit();
        $start_time = $end_time;
    }
    
    $count = (int) $count - 1;
    if ( 1 > $count ) {
        $message = sprintf(
            esc_html__( 'Lockout occurred: Too many failed 2fa attempts for %s method.', 'wpdef' ),
            $slug
        );
        do_action( 'wd_2fa_lockout', $user_id, $message, $time_limit );
        delete_user_meta( $user_id, 'wd_2fa_attempt_' . $slug );
        wp_safe_redirect( home_url() );
        exit;
    }
}
```

### **PMPro Login Lockout Pattern**
**Pattern Source**: PMPro includes/login.php, adminpages/securitysettings.php
**Index Terms**: `login_security`, `login_attempts`, `login_lockout`

```php
// ✅ GOOD: PMPro login attempt tracking with time windows
// Pattern from paid-memberships-pro/includes/login.php
function pmpro_login_attempt_tracking() {
    $username = $_POST['log'];
    $password = $_POST['pwd'];
    
    // Check if login form is submitted
    if ( !empty( $_POST['pmpro_login_form_used'] ) && !empty( $_POST['pmpro_login_form_submitted'] ) ) {
        $user = get_user_by( 'login', $username );
        if ( $user ) {
            $ip = pmpro_get_ip();
            $model = Lockout_Ip::get( $ip );
            $model = $this->record_fail_attempt( $ip, $model );
            
            // Log the event
            $this->log_event( $ip, $username, self::SCENARIO_LOGIN_FAIL );
            
            // Check if IP should be locked based on attempt window
            $ls = $this->model;
            $window = strtotime( '-' . $ls->timeframe . 'seconds' );
            
            $model = $this->check_meta_data( $model );
            // Get the latest attempts, limited by attempt count
            $checks = array_slice( $model->meta['login'], $ls->attempt * -1 );
            
            if ( count( $checks ) < $ls->attempt ) {
                // Log failed login attempt
                $this->log_failed_login( $username, $ip );
                return new WP_Error( 'pmpro_login_failed', esc_html__( 'Invalid username or password.', 'paid-memberships-pro' ) );
            }
            
            // Check if attempts are within the time window
            $check = min( $checks );
            if ( $check >= $window ) {
                // Log failed login attempt
                $this->log_failed_login( $username, $ip );
                return new WP_Error( 'pmpro_login_failed', esc_html__( 'Invalid username or password.', 'paid-memberships-pro' ) );
            }
        }
    }
}

// ✅ GOOD: WP Defender attempt counter with transient
private function check_attempt_counter_by( $blocked_ip ): bool {
    $blocked_ip    = $this->check_ip_by_remote_addr( $blocked_ip );
    $request_count = get_transient( $blocked_ip );
    $disabled      = false;
    
    if ( false === $request_count ) {
        set_transient( $blocked_ip, 1, Unlock_Me::EXPIRED_COUNTER_TIME );
    } elseif ( (int) $request_count >= Unlock_Me::get_attempt_limit() ) {
        $disabled = true;
    } else {
        ++$request_count;
        set_transient( $blocked_ip, $request_count, Unlock_Me::EXPIRED_COUNTER_TIME );
    }
    
    return $disabled;
}

// ✅ GOOD: WP Defender 2FA attempt limiting
public function get_attempt_limit(): int {
    return (int) apply_filters( 'wd_2fa_attempt_limit', self::ATTEMPT_LIMIT );
}

// ✅ GOOD: WP Defender 2FA lockout with time limits
if ( apply_filters( 'wd_2fa_enable_attempts', true ) && $login_settings->enabled ) {
    $line = get_user_meta( $user_id, 'wd_2fa_attempt_' . $slug, true );
    
    if ( empty( $line ) ) {
        $count      = $this->get_attempt_limit();
        $start_time = time();
    } else {
        [ $count, $start_time ] = explode( '::', $line );
    }
    
    $end_time   = time();
    $time_limit = $this->get_time_limit();
    
    // Reset attempts if time limit exceeded
    if ( $end_time - $start_time >= $time_limit ) {
        delete_user_meta( $user_id, 'wd_2fa_attempt_' . $slug );
        $count      = $this->get_attempt_limit();
        $start_time = $end_time;
    }
    
    $count = (int) $count - 1;
    if ( 1 > $count ) {
        $message = sprintf(
            esc_html__( 'Lockout occurred: Too many failed 2fa attempts for %s method.', 'wpdef' ),
            $slug
        );
        do_action( 'wd_2fa_lockout', $user_id, $message, $time_limit );
        delete_user_meta( $user_id, 'wd_2fa_attempt_' . $slug );
        wp_safe_redirect( home_url() );
        exit;
    }
}
```

## 🎯 **AI Assistant Usage Guide**

### **🚨 Auto-Triggered Security Hooks**
*These patterns automatically trigger when the AI detects related code:*

#### **🔒 Nonce Security Hooks** (`input_nonce`)
```bash
# Auto-triggers when detecting form submissions or AJAX calls
"Apply input_nonce patterns for WordPress admin forms"
"Use PMPro checkout nonce verification pattern"
"Implement WP Defender AJAX nonce validation"
"Add multi-action nonce verification pattern"
"Apply two-factor nonce security pattern"
```

#### **🔍 Input Validation Hooks** (`input_sanitize`)
```bash
# Auto-triggers when detecting $_POST, $_GET, $_REQUEST usage
"Apply input_sanitize comprehensive sanitization patterns"
"Use PMPro checkout field validation pattern"
"Implement WP Defender recursive data sanitization"
"Add file upload validation with MIME checking"
"Apply safelist validation pattern"
```

#### **🔐 Output Security Hooks** (`output_escape`)
```bash
# Auto-triggers when detecting echo, print, or template output
"Apply output_escape comprehensive escaping patterns"
"Use WP Defender template output security"
"Implement PMPro custom wp_kses patterns"
"Add error message escaping pattern"
"Apply attribute and URL escaping patterns"
```

#### **👤 Authentication Hooks** (`auth_capability`)
```bash
# Auto-triggers when detecting admin pages or restricted functionality
"Apply auth_capability comprehensive management patterns"
"Use WP Defender permission trait pattern"
"Implement PMPro admin page security"
"Add REST API permission checking"
"Apply multisite capability patterns"
```

#### **🗄️ Database Security Hooks** (`db_security`)
```bash
# Auto-triggers when detecting database queries
"Apply db_security prepared statement patterns"
"Use WP Defender ORM security patterns"
"Implement PMPro search query security"
"Add secure table creation patterns"
"Apply bulk operation security patterns"
```

#### **⚡ Rate Limiting Hooks** (`rate_limiting`)
```bash
# Auto-triggers when detecting login forms or sensitive endpoints
"Apply rate_limiting comprehensive spam protection"
"Use WP Defender advanced rate limiting"
"Implement PMPro reCAPTCHA integration"
"Add IP blacklist management patterns"
"Apply progressive lockout patterns"
```

#### **🔑 Login Security Hooks** (`login_security`)
```bash
# Auto-triggers when detecting authentication or login functionality
"Apply login_security comprehensive protection"
"Use WP Defender two-factor authentication"
"Implement login lockout system patterns"
"Add password security patterns"
"Apply mask login protection"
```

#### **📁 File Security Hooks** (`file_access`)
```bash
# Auto-triggers when detecting file operations or uploads
"Apply file_access secure serving patterns"
"Use WP Defender directory protection"
"Implement Apache/Nginx security rules"
"Add file upload security patterns"
"Apply directory traversal prevention"
```

#### **🛡️ Security Headers Hooks** (`security_headers`)
```bash
# Auto-triggers when detecting HTTP responses or headers
"Apply security_headers comprehensive protection"
"Use WP Defender security header patterns"
"Implement Content Security Policy"
"Add HSTS and SSL security patterns"
"Apply information disclosure prevention"
```

#### **📊 Error Handling Hooks** (`error_logging`)
```bash
# Auto-triggers when detecting error handling or logging
"Apply error_logging development patterns"
"Use WP Defender advanced debug logging"
"Implement user-friendly error handling"
"Add conditional logging patterns"
"Apply secure API error responses"
```

### **🎯 Dashboard Plugin Specific Hooks** (`dashboard_*`)
```bash
# Auto-triggers when working on Dashboard Plugin files
"Apply dashboard_nonce patterns for menu operations"
"Use dashboard_permissions with PMPro integration"
"Implement dashboard_ajax security patterns"
"Add dashboard_templates protection patterns"
"Apply dashboard_api security for external services"
"Use dashboard_canvas user data protection"
```

---

### **🔍 Manual Pattern Lookup**
*Use these when you need specific security patterns:*

#### **Core Security Patterns**
```bash
# Nonce and CSRF protection
"Show me input_nonce patterns for WordPress admin forms"
"Get PMPro checkout nonce verification examples"
"Find WP Defender AJAX nonce patterns"

# Input validation and sanitization
"Show input_sanitize comprehensive patterns"
"Get file upload validation examples"
"Find recursive array sanitization patterns"

# Output escaping and XSS prevention
"Show output_escape template security patterns"
"Get comprehensive escaping function reference"
"Find wp_kses custom implementation examples"

# Authentication and authorization
"Show auth_capability management patterns"
"Get multisite permission checking examples"
"Find REST API authentication patterns"

# Database security
"Show db_security prepared statement patterns"
"Get bulk operation security examples"
"Find search query security patterns"
```

#### **Advanced Security Patterns**
```bash
# Rate limiting and spam protection
"Show rate_limiting comprehensive patterns"
"Get CAPTCHA integration examples"
"Find IP blacklist management patterns"

# Login security and protection
"Show login_security comprehensive patterns"
"Get two-factor authentication examples"
"Find login lockout system patterns"

# File security and access control
"Show file_access secure serving patterns"
"Get directory protection examples"
"Find server-level security rule patterns"

# Security headers and HTTP protection
"Show security_headers comprehensive patterns"
"Get Content Security Policy examples"
"Find HSTS implementation patterns"

# Error handling and logging
"Show error_logging development patterns"
"Get conditional logging examples"
"Find secure error response patterns"
```

---

### **🛡️ Security Implementation Checklist**
*Mandatory security measures for all WordPress plugin development:*

#### **🔒 Input Security** - REQUIRED FOR ALL FORMS/AJAX
- [ ] **Nonce Protection**: All forms and AJAX requests use nonce verification
- [ ] **Input Sanitization**: All user inputs sanitized before processing  
- [ ] **File Upload Validation**: MIME types, size limits, malware scanning
- [ ] **Array Data Handling**: Recursive sanitization for complex data

#### **🔐 Output Security** - REQUIRED FOR ALL OUTPUT
- [ ] **Output Escaping**: All outputs properly escaped for context
- [ ] **Template Security**: WordPress template standards followed
- [ ] **JSON Security**: Secure AJAX response handling
- [ ] **URL Security**: All links and redirects properly escaped

#### **👤 Authentication Security** - REQUIRED FOR ALL ADMIN FUNCTIONS
- [ ] **Capability Checks**: All admin functions check user capabilities
- [ ] **Role Verification**: Proper role-based access control
- [ ] **Session Management**: Secure session handling
- [ ] **API Authentication**: REST/XMLRPC endpoints secured

#### **🗄️ Database Security** - REQUIRED FOR ALL QUERIES
- [ ] **Prepared Statements**: All database queries use prepared statements
- [ ] **SQL Injection Prevention**: No direct query construction
- [ ] **Search Security**: LIKE queries properly escaped
- [ ] **Bulk Operations**: Batch processing security implemented

#### **⚡ Rate Limiting** - REQUIRED FOR SENSITIVE ENDPOINTS
- [ ] **Login Protection**: Login attempt limiting implemented
- [ ] **Spam Protection**: Form submission rate limiting
- [ ] **IP Management**: Whitelist/blacklist functionality
- [ ] **CAPTCHA Integration**: Human verification for sensitive forms

#### **🔑 Login Security** - REQUIRED FOR AUTHENTICATION
- [ ] **Attempt Tracking**: Failed login attempt monitoring
- [ ] **Account Lockout**: Progressive penalty system
- [ ] **Password Security**: Strength requirements enforced
- [ ] **Session Protection**: IP and browser validation

#### **📁 File Security** - REQUIRED FOR ALL FILE OPERATIONS
- [ ] **Direct Access Prevention**: .htaccess rules implemented
- [ ] **Upload Validation**: Comprehensive file type checking
- [ ] **Directory Protection**: Index files and permissions set
- [ ] **Server Rules**: Apache/Nginx security configured

#### **🛡️ Headers & SSL** - REQUIRED FOR ALL HTTP RESPONSES
- [ ] **Security Headers**: Comprehensive HTTP header protection
- [ ] **SSL/HTTPS**: Secure connection enforcement
- [ ] **Content Security Policy**: XSS prevention implemented
- [ ] **Information Disclosure**: Server signature hiding

#### **📊 Error Handling** - REQUIRED FOR ALL ERROR SCENARIOS
- [ ] **Secure Logging**: Development-only debug information
- [ ] **User-Friendly Errors**: Production-safe error messages
- [ ] **API Error Security**: Secure error responses
- [ ] **Conditional Logging**: Environment-based logging levels

---

**Document Version**: 3.0.0 - PMPro & WP Defender Examples Only  
**Last Updated**: July 18, 2025  
**Pattern Sources**: PMPro v3.4.7, WP Defender v5.3.1  
**AI Index**: Enabled with search terms for rapid pattern discovery 

---