---
description: INTELLIGENT Terminal command execution patterns - Auto-triggered when AI needs to run commands via run_terminal_cmd, execute PHP scripts, open files with Cursor CLI, or perform file operations. Provides Windows PowerShell safety patterns and Cursor CLI integration.
alwaysApply: false
---
# üñ•Ô∏è **TERMINAL COMMAND EXECUTION RULES - WINDOWS ENVIRONMENT**

## üö® **CRITICAL EXECUTION PRINCIPLES**

### **‚ùå NEVER USE THESE (GUARANTEED TO FAIL):**
- Complex PowerShell syntax with `&&` operators
- Long command chains in PowerShell
- PowerShell-specific operators like `-and`, `-or`
- Complex escaping in PowerShell one-liners
- Multiple `cd` commands chained with `&&`

### **‚úÖ ALWAYS USE THESE (GUARANTEED TO WORK):**
- **CMD wrapper**: `cmd /c "command here"` for complex operations
- **Simple PHP**: `php filename.php` for direct script execution
- **Basic commands**: `dir`, `type filename.txt`, `php -l filename.php`
- **Single operations**: One command per `run_terminal_cmd` call
- **Cursor CLI**: `cursor filename.php` or `code filename.php` for opening files

---

## üéØ **COMMAND PATTERNS - MEMORIZED SOLUTIONS**

### **‚úÖ PHP Script Execution**
```bash
# ‚úÖ CORRECT - Simple and reliable
php filename.php

# ‚úÖ CORRECT - With path separators
php Dashboard\includes\class-file.php

# ‚ùå WRONG - Complex paths with PowerShell
cd .. && cd .. && php wp-content/plugins/file.php
```

### **‚úÖ PHP Syntax Checking**
```bash
# ‚úÖ CORRECT - Direct syntax check
php -l Dashboard\security\security-forms.php

# ‚úÖ CORRECT - Using CMD wrapper for complex paths
cmd /c "php -l Dashboard\includes\class-menu-manager.php"

# ‚ùå WRONG - PowerShell escaping nightmare
php -r "require_once 'path'; echo 'result';"
```

### **‚úÖ File Operations**
```bash
# ‚úÖ CORRECT - Simple file operations
dir Dashboard\security
type Dashboard\test-results.txt

# ‚úÖ CORRECT - CMD wrapper for complex operations
cmd /c "dir /s *.php"

# ‚ùå WRONG - PowerShell Get-Content with complex paths
Get-Content "complex\path\file.txt" | Select-Object -Last 20
```

### **‚úÖ Directory Navigation**
```bash
# ‚úÖ CORRECT - Simple directory changes
cd Dashboard
cd includes

# ‚úÖ CORRECT - CMD wrapper for multiple operations
cmd /c "cd .. && dir"

# ‚ùå WRONG - PowerShell complex navigation
cd .. && cd .. && php command
```

### **‚úÖ CURSOR CLI COMMANDS (NEW - GUARANTEED TO WORK)**
```bash
# ‚úÖ CORRECT - Open single file in Cursor
cursor Dashboard\dashboard-main.php
code Dashboard\dashboard-main.php

# ‚úÖ CORRECT - Open folder in Cursor
cursor Dashboard\
code Dashboard\

# ‚úÖ CORRECT - Open multiple files
cursor file1.php file2.php
code file1.php file2.php

# ‚úÖ CORRECT - Open in new window
cursor -n Dashboard\dashboard-main.php
cursor --new-window Dashboard\dashboard-main.php

# ‚úÖ CORRECT - Wait for window to close
cursor -w Dashboard\dashboard-main.php
cursor --wait Dashboard\dashboard-main.php

# ‚úÖ CORRECT - Open at specific line and column
cursor -g Dashboard\dashboard-main.php:25:10
cursor --goto Dashboard\dashboard-main.php:25:10

# ‚úÖ CORRECT - Compare two files
cursor -d file1.php file2.php
cursor --diff file1.php file2.php

# ‚úÖ CORRECT - Add folder to existing window
cursor -a Dashboard\includes\
cursor --add Dashboard\includes\

# ‚ùå WRONG - Complex PowerShell with Cursor CLI
cursor $(Get-ChildItem *.php | Select-Object -First 3)
```

---

## üéØ **CURSOR CLI DECISION TREE**

### **When to Use Cursor CLI:**
- **Opening files for editing**: Use `cursor filename.php` or `code filename.php`
- **Opening project folders**: Use `cursor Dashboard\` or `code Dashboard\`
- **Comparing files**: Use `cursor -d file1.php file2.php`
- **Opening at specific line**: Use `cursor -g file.php:line:column`

### **Cursor CLI Fallback Strategy:**
```bash
# Step 1: Try simple cursor command
cursor Dashboard\dashboard-main.php

# Step 2: If fails, try code command (identical functionality)
code Dashboard\dashboard-main.php

# Step 3: If both fail, try with new window flag
cursor -n Dashboard\dashboard-main.php

# Step 4: If still fails, try with full path
cursor "C:\Users\mansu\Local Sites\cpaas\app\public\wp-content\plugins\Dashboard\dashboard-main.php"

# Step 5: Emergency fallback - open folder instead
cursor Dashboard\
```

### **Common Cursor CLI Patterns:**
```bash
# ‚úÖ DEVELOPMENT WORKFLOW PATTERNS

# Open main plugin file for editing
cursor Dashboard\dashboard-main.php

# Open entire Dashboard folder
cursor Dashboard\

# Open specific class for debugging
cursor Dashboard\includes\class-menu-manager.php

# Compare two versions of a file
cursor -d Dashboard\includes\class-menu-manager.php Dashboard\includes\class-menu-manager.php.backup

# Open file at error line (from PHP error message)
cursor -g Dashboard\includes\class-menu-manager.php:150:25

# Open multiple related files
cursor Dashboard\includes\class-menu-manager.php Dashboard\security\security-forms.php

# Add new folder to current workspace
cursor -a Dashboard\templates\

# Open in new window for side-by-side work
cursor -n Dashboard\includes\class-template-manager.php
```

---

## üö® **CURSOR CLI ERROR RECOVERY**

### **If Cursor CLI Command Fails:**

#### **Error Pattern 1: Command not recognized**
```bash
# ‚ùå Error: 'cursor' is not recognized as an internal or external command
# ‚úÖ Solution: Try 'code' command instead
code Dashboard\dashboard-main.php

# ‚úÖ Alternative: Check if CLI is installed
cursor --version
code --version
```

#### **Error Pattern 2: File path issues**
```bash
# ‚ùå Error: Cannot resolve file path
# ‚úÖ Solution: Use quotes for paths with spaces
cursor "Dashboard\folder with spaces\file.php"

# ‚úÖ Alternative: Use relative path
cd Dashboard
cursor dashboard-main.php
```

#### **Error Pattern 3: Permission issues**
```bash
# ‚ùå Error: Access denied or permission issues
# ‚úÖ Solution: Try opening parent folder instead
cursor Dashboard\

# ‚úÖ Alternative: Use new window flag
cursor -n Dashboard\dashboard-main.php
```

### **Cursor CLI Troubleshooting Checklist:**
1. **Verify installation**: `cursor --version` and `code --version`
2. **Try alternative command**: If `cursor` fails, try `code`
3. **Check file path**: Ensure file exists with `dir filename`
4. **Use quotes**: For paths with spaces or special characters
5. **Try parent folder**: If file fails, try opening containing folder
6. **Use new window**: Add `-n` flag if current window has issues

---

## üîß **POWERSHELL ISSUE IDENTIFICATION**

### **üö® PowerShell PSReadLine Error Symptoms:**
```
Oops, something went wrong. Please report this bug with the details below.
Report on GitHub: https://github.com/lzybkr/PSReadLine/issues/new
-----------------------------------------------------------------------
Exception:
System.ArgumentOutOfRangeException: The value must be greater than or equal to zero and less than the console's buffer size in that dimension.
Parameter name: top
Actual value was -1.
```

### **üéØ Root Cause:**
- **Issue**: PowerShell PSReadLine console buffer management bug
- **Trigger**: Long commands, complex escaping, multiple operators
- **Impact**: Command may execute successfully but display errors
- **Solution**: Use CMD wrapper or simplify commands

---

## üõ†Ô∏è **COMMAND EXECUTION STRATEGY**

### **Level 1: Simple Commands (Use Directly)**
```bash
php filename.php                    # ‚úÖ Direct execution
php -l filename.php                 # ‚úÖ Syntax check
dir                                 # ‚úÖ Directory listing
type filename.txt                   # ‚úÖ File content
cd directory                       # ‚úÖ Single directory change
```

### **Level 2: Complex Commands (Use CMD Wrapper)**
```bash
cmd /c "php -l path\to\file.php"                    # ‚úÖ Complex paths
cmd /c "dir /s *.php"                               # ‚úÖ Recursive operations
cmd /c "cd .. && php wp-content\plugins\file.php"  # ‚úÖ Multiple operations
cmd /c "php script.php > output.txt 2>&1"          # ‚úÖ Redirections
```

### **Level 3: Very Complex (Break Into Steps)**
```bash
# ‚ùå WRONG - All in one complex command
cmd /c "cd .. && cd .. && php complex-path\script.php && type results.txt"

# ‚úÖ CORRECT - Break into simple steps
cd ..
cd ..
php complex-path\script.php
type results.txt
```

---

## üìã **COMMON SCENARIOS - SOLUTION PATTERNS**

### **Scenario 1: PHP Script Testing**
```bash
# ‚úÖ PATTERN: Test syntax first, then execute
php -l Dashboard\security\security-forms.php
php Dashboard\test-script.php
```

### **Scenario 2: File Verification**
```bash
# ‚úÖ PATTERN: Simple file operations
dir Dashboard\security
type Dashboard\test-results.txt
```

### **Scenario 3: Database/WordPress Testing**
```bash
# ‚úÖ PATTERN: Simple PHP execution (avoid WordPress path complexity)
php test-simple.php
# If WordPress needed, use relative paths in PHP script itself
```

### **Scenario 4: Multiple File Processing**
```bash
# ‚úÖ PATTERN: One command per file
php -l file1.php
php -l file2.php
php -l file3.php

# ‚úÖ ALTERNATIVE: CMD wrapper for batch
cmd /c "for %f in (*.php) do php -l %f"
```

### **Scenario 5: File Editing Workflow (NEW)**
```bash
# ‚úÖ PATTERN: Open file for editing after testing
php -l Dashboard\includes\class-menu-manager.php
cursor Dashboard\includes\class-menu-manager.php

# ‚úÖ PATTERN: Compare files before and after changes
cursor -d Dashboard\includes\class-menu-manager.php Dashboard\includes\class-menu-manager.php.backup

# ‚úÖ PATTERN: Open at error line from PHP output
php Dashboard\test-script.php
# If error at line 45: 
cursor -g Dashboard\test-script.php:45

# ‚úÖ PATTERN: Open multiple related files for development
cursor Dashboard\includes\class-menu-manager.php Dashboard\security\security-forms.php Dashboard\templates\dashboard-template.php
```

### **Scenario 6: Project Navigation (NEW)**
```bash
# ‚úÖ PATTERN: Open entire project folder
cursor Dashboard\

# ‚úÖ PATTERN: Add specific folders to workspace
cursor -a Dashboard\includes\
cursor -a Dashboard\security\
cursor -a Dashboard\templates\

# ‚úÖ PATTERN: Open in separate window for comparison
cursor -n Dashboard\includes\class-menu-manager.php
```

---

## üéØ **DECISION TREE FOR COMMAND SELECTION**

### **Question 1: Do you want to open/edit files?**
- **YES**: Use Cursor CLI (`cursor filename.php` or `code filename.php`)
- **NO**: Go to Question 2

### **Question 2: Is it a single, simple command?**
- **YES**: Use direct command (`php filename.php`)
- **NO**: Go to Question 3

### **Question 3: Does it involve paths, redirections, or operators?**
- **YES**: Use CMD wrapper (`cmd /c "complex command"`)
- **NO**: Use direct command

### **Question 4: Is the CMD wrapper command > 100 characters?**
- **YES**: Break into multiple simple commands
- **NO**: Use CMD wrapper

### **Question 5: Did the Cursor CLI command fail?**
- **YES**: Try fallback strategy (code command, new window, or folder)
- **NO**: Command successful

---

## üöÄ **TESTING VERIFICATION PATTERNS**

### **‚úÖ Success Indicators:**
- Command executes without PSReadLine errors
- Expected output appears
- Exit code is 0 for successful operations
- No "Exception" or "ArgumentOutOfRangeException" messages

### **‚ùå Failure Indicators:**
- PSReadLine error messages
- "The token '&&' is not a valid statement separator"
- "The term 'command' is not recognized"
- Console buffer exceptions

### **üîß Recovery Actions:**
1. **Immediate**: Use CMD wrapper for the same command
2. **If CMD fails**: Break command into smaller parts
3. **If still failing**: Create a batch file or PHP script

---

## üìù **ENVIRONMENT-SPECIFIC NOTES**

### **Windows 10 PowerShell Environment:**
- **Version**: Windows PowerShell 5.x with PSReadLine
- **Issue**: Console buffer management in long commands
- **Workaround**: CMD wrapper bypasses PSReadLine entirely

### **VS Code Terminal:**
- **Default**: PowerShell with same issues
- **Solution**: Same CMD wrapper approach works
- **Alternative**: Can switch to Command Prompt in VS Code terminal

### **Local by Flywheel Environment:**
- **Path Structure**: `C:\Users\mansu\Local Sites\cpaas\app\public\wp-content\plugins`
- **PHP Path**: Direct `php` command available
- **File Separators**: Use `\` for Windows paths

---

## üéØ **MANDATORY EXECUTION CHECKLIST**

### **Before Running Any Terminal Command:**
- [ ] Is this a simple single command? ‚Üí Use directly
- [ ] Does this involve operators or complex paths? ‚Üí Use CMD wrapper
- [ ] Is the command longer than 100 characters? ‚Üí Break into steps
- [ ] Am I using PowerShell-specific syntax? ‚Üí Convert to CMD syntax

### **After Command Execution:**
- [ ] Did I get the expected output?
- [ ] Are there any PSReadLine error messages?
- [ ] Did the command actually complete successfully?
- [ ] Should I use CMD wrapper next time for this pattern?

---

## üèÜ **SUCCESS EXAMPLES FROM RECENT WORK**

### **‚úÖ Working Examples:**
```bash
# Security file syntax check
cmd /c "php -l Dashboard\security\security-forms.php"
# Result: "No syntax errors detected"

# Menu manager syntax check  
cmd /c "php -l Dashboard\includes\class-menu-manager.php"
# Result: "No syntax errors detected"

# Simple script execution
php Dashboard\test-files-only.php
# Result: Successful execution with output
```

### **‚ùå Failed Attempts (Learned From):**
```bash
# Complex PowerShell escaping - FAILED
php -r "require_once 'file'; echo 'result';"

# Multiple operators - FAILED
cd .. && cd .. && php script.php

# Long command chains - FAILED
powershell -Command "complex multi-step operation"
```

---

## üéØ **FINAL RULE SUMMARY**

### **ü•á GOLDEN RULES:**
1. **File Editing First**: Use `cursor filename.php` or `code filename.php` for opening files
2. **Simple Commands**: Try direct command first (`php filename.php`)
3. **CMD Wrapper**: Use `cmd /c "command"` for complexity
4. **Break Apart**: Split very long commands into steps
5. **Test Pattern**: Syntax check first, then execute
6. **No PowerShell**: Avoid PowerShell-specific syntax entirely
7. **Cursor Fallback**: If `cursor` fails, try `code`, then try with flags

### **üö® EMERGENCY FALLBACK:**
If all else fails:
1. **Cursor CLI**: Try `cursor -n filename.php` or `cursor foldername\`
2. **Batch File**: Create a `.bat` file with the commands
3. **Direct Execution**: Execute the batch file directly
4. **PHP Script**: Use PHP script to handle complex operations

---

**Document Version**: 2.0.0 - Terminal Command Execution Rules with Cursor CLI  
**Environment**: Windows 10 PowerShell with PSReadLine + Cursor CLI  
**Last Updated**: January 19, 2025  
**Status**: Tested and verified with Dashboard Plugin development + Cursor CLI integration  
**Auto-Apply**: Intelligent loading before terminal operations
