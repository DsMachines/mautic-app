---
name: database-security-reference
description: INTELLIGENT: Supplementary database security patterns - Auto-triggered when AI needs implementation context for complex $wpdb migrations, error handling, or debug verification. Links to ai-database-security-failsafe.mdc for seamless workflow.
globs:
  - Dashboard/**/*.php
  - "**/*.php"
alwaysApply: false
---

# 🛡️ **DATABASE SECURITY REFERENCE - INTELLIGENT FAILSAFE HOOK**

## 🧠 **INTELLIGENT AUTO-TRIGGER CONDITIONS**

**AI ASSISTANT MUST REFERENCE this guide when detecting ANY of these database security implementation needs:**

### **🔍 TRIGGER KEYWORDS & PATTERNS:**
```php
// DATABASE SECURITY TRIGGERS - AI SHOULD LOAD THIS FILE
"migration"                  // Database migration discussions
"error handling"             // Error handling implementation needs
"debug verification"         // Debug and verification requirements
"implementation"             // Implementation context requests
"get_db()"                   // Security helper method references
"security helper"            // Security helper integration discussions
"complex $wpdb"              // Complex database operation needs
"Dashboard_Security_Database" // Security database class references
"prepared statements"        // Prepared statement implementation
"database security"          // Database security discussions
"SQL injection"              // SQL injection prevention needs
"wpdb replacement"           // Replacing direct wpdb usage
"security integration"       // Security integration requirements
"database logging"           // Database logging implementation
"audit trail"                // Audit trail implementation needs
```

### **🎯 CONTEXT-BASED TRIGGERS:**
- Complex database migration scenarios requiring security helper
- Error handling implementation for database operations
- Debug verification and testing requirements
- Advanced security helper integration patterns
- Performance optimization questions involving database security
- Implementation context for replacing direct $wpdb usage
- Audit trail and logging implementation needs

### **📊 INTEGRATION TRIGGERS:**
- References to ai-database-security-failsafe.mdc patterns
- Links to security-database.mdc core patterns
- Complex implementation scenarios requiring detailed examples
- Migration from direct $wpdb to security helper patterns

---

## 🎯 **INTELLIGENT LOADING TRIGGERS**: This file auto-loads when AI encounters:
- Complex `$wpdb` migration scenarios
- Error handling implementation needs  
- Debug verification requirements
- Advanced security helper integration
- Performance optimization questions

## 🎯 **QUICK IMPLEMENTATION PATTERNS**

### **Security Helper Integration**
```php
// Add to class constructor or init method:
private $db;

public function __construct() {
    $this->db = \Dashboard_Security_Database::instance();
}

// Or use lazy loading:
private function get_db() {
    if (!$this->db) {
        $this->db = \Dashboard_Security_Database::instance();
    }
    return $this->db;
}
```

### **Error Handling Patterns**
```php
// ✅ CORRECT: Use security helper return values
$result = $this->get_db()->insert($table, $data, $formats);
if ($result === false) {
    // Handle error - helper already logged details
    return new WP_Error('db_error', 'Database operation failed');
}

// ❌ FORBIDDEN: Direct $wpdb error checking
if ($wpdb->last_error) { /* DON'T DO THIS */ }
```

### **Complex Migration Patterns**
```php
// MIGRATION SCENARIO: Multiple $wpdb operations in single method
// BEFORE (vulnerable):
global $wpdb;
$results = $wpdb->get_results($wpdb->prepare(
    "SELECT * FROM {$wpdb->prefix}table WHERE status = %s AND user_id = %d",
    $status, $user_id
));
$count = $wpdb->get_var($wpdb->prepare(
    "SELECT COUNT(*) FROM {$wpdb->prefix}table WHERE user_id = %d", 
    $user_id
));
if ($wpdb->last_error) {
    // Error handling needed
}

// AFTER (secure migration):
$results = $this->get_db()->query(
    "SELECT * FROM {$wpdb->prefix}table WHERE status = %s AND user_id = %d",
    [$status, $user_id],
    'get_results'
);
$count = $this->get_db()->query(
    "SELECT COUNT(*) FROM {$wpdb->prefix}table WHERE user_id = %d", 
    [$user_id],
    'get_var'
);
// Error handling via return values (no $wpdb->last_error)
if ($results === false || $count === false) {
    return new WP_Error('db_error', 'Database operation failed');
}
```

## ⚡ **PERFORMANCE OPTIMIZATION PATTERNS**

### **Bulk Operations Implementation**
```php
// PERFORMANCE SCENARIO: Processing large datasets
// BEFORE (inefficient):
foreach ($large_dataset as $item) {
    $wpdb->insert($table, $item, $formats);  // ❌ FORBIDDEN + SLOW
}

// AFTER (optimized + secure):
$this->get_db()->bulk_insert($table, $large_dataset);  // ✅ SECURE + FAST
```

### **Caching Integration with Security Helper**
```php
// PERFORMANCE + SECURITY: Cached database operations
$cache_key = 'secure_data_' . $user_id;
$data = get_transient($cache_key);

if ($data === false) {
    $data = $this->get_db()->query(
        "SELECT * FROM {$wpdb->prefix}table WHERE user_id = %d",
        [$user_id],
        'get_results'
    );
    
    if ($data !== false) {
        set_transient($cache_key, $data, HOUR_IN_SECONDS);
    }
}
```

## 🔍 **DEBUG VERIFICATION**

### **Success Indicators in debug.log:**
```
[timestamp] 🛡️ DB-SEC 🔍 QUERY: SELECT ...
[timestamp] 🛡️ DB-SEC 📝 INSERT: INSERT INTO ...
[timestamp] 🛡️ DB-SEC ✏️ UPDATE: UPDATE ...
```

### **Validation Commands:**
```bash
# Check for remaining vulnerabilities:
grep -r "\$wpdb->\(get_var\|get_results\|query\|insert\|update\|delete\)" Dashboard/ --include="*.php"

# Verify security helper usage:
grep -r "get_db()" Dashboard/ --include="*.php"
```

## 🎯 **PROVEN SUCCESS METRICS**

- **Dashboard Plugin**: 42/42 operations secured (100%)
- **Zero vulnerabilities**: No SQL injection risks remain
- **Performance**: No degradation with security helper
- **Compatibility**: Full WordPress standards compliance

---

**Reference Version**: 1.0.0  
**Main Failsafe**: ai-database-security-failsafe.mdc  
**Core Patterns**: security-database.mdc

---
name: database-security-reference
description: INTELLIGENT: Supplementary database security patterns - Auto-triggered when AI needs implementation context for complex $wpdb migrations, error handling, or debug verification. Links to ai-database-security-failsafe.mdc for seamless workflow.
globs:
  - Dashboard/**/*.php
  - "**/*.php"
alwaysApply: false  # Intelligent loading - triggered by keywords: "migration", "error handling", "debug", "implementation", "get_db()", "security helper"
---
